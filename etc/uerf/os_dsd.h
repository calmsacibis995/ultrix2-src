/*  sccsid  =  @(#)os_dsd.h	1.10   (ULTRIX)   1/29/87  */
/*
**	.title Operating system DSD definitions
**	.ident / 1.14 /
**
**
**	  File:	ultrix_dsd.h
** Description:	Operating system DSD definitions
**	Author:	Bob Winant
**	  Date:	8-Oct-1986
**
**
**	Copyright 1986, Digital Equipment Corporation
**
**
**++
**	These definitions were generated by the DSD Editor / Compiler
**--
*/



#define OS_DSD_FILE_FORMAT 2
#define ALIGN_S_FLD 2	/* align short	 */
#define ALIGN_L_FLD 4	/* align long	 */
#define ALIGN_Q_FLD 4	/* align quad	 */
#define ALIGN_P_FLD 4	/* align pointer */

/* OS-ITEM id codes */
#define OS$rhdr_seqnum  1	/* Raw event sequence number */
#define OS$rhdr_time    2	/* Date/time event occurred */
#define OS$rhdr_sid     3	/* System id */
#define OS$rhdr_hname   4	/* Ascii host name */
#define OS$evclass      5	/* Raw to standard mapping event (subid_class) for eventclass */
#define OS$cpuerr       6	/* cpu type errors */
#define OS$memerr       7	/* memory error class */
#define OS$dsdisk       8	/* dsa disk errors */
#define OS$mbdisk       9	/* massbus disk errors */
#define OS$dstape       10	/* dsa tapes */
#define OS$mbtape       11	/* massbus tapes */
#define OS$buserr       12	/* bus errors */
#define OS$adaperr      13	/* adapter errors */
#define OS$miscerr      14	/* Miscellaneous errors (not currently classified) */
#define OS$mckdev       15	/* Raw mck id to derive actual cpu type */
#define OS$ctedev       16	/* CPU types associated with a console timeout */
#define OS$ciport       17	/* CI ports (connectors to machine & CI wire) */
#define OS$dsdtyp       18	/* DSA disK types */
#define OS$mbdtyp       19	/* Massbus disk types */
#define OS$dsttyp       20	/* DSA tape types */
#define OS$mbttyp       21	/* Massbus tape types */
#define OS$ubdtyp       22	/* Unibus disk types */
#define OS$ubttyp       23	/* Unibus tape types */
#define OS$ctlmem       24	/* Memory Controller types to derive cpu type from */
#define OS$mckstk       25	/* Machine Check identifiers for coarsesyndrome */
#define OS$bussyn       26	/* Bus Error ids for coarsesyndrome */
#define OS$adpsyn       27	/* Adapter error ids for coarsesyndrome */
#define OS$sisyn        28	/* Stray Interrupt types for coarsesyndrome */
#define OS$ctesyn       29	/* Console timeout ids for coarsesyndrome */
#define OS$cimtyp       30	/* CI message packet descriptions */
#define OS$stkdtyp      31	/* Stack dump types */
#define OS$expflt       32	/* Panic/Exception Fault codes */
#define OS$memsyn       33	/* Memory Error types */
#define OS$memctl       34	/* Memory Controllers */
#define OS$subid_num    35	/* Controller/bus/cpu number */
#define OS$subid_unitnum    36	/* device slave unit number */
#define OS$subid_errcode    37	/* error codes returned by various devices */
#define OS$msg_asc      38	/* Ascii message for ascii message types */
#define OS$mck_byte_count   39	/* MCK stack byte count reg for all mcks */
#define OS$mck_summary  40	/* Summary register for mcks */
#define OS$mc86_ehm     41	/* 8600 ehm status register */
#define OS$mc86_evm     42	/* 8600 mck evmqsave reg */
#define OS$mc86_ebcs    43	/* 8600 machine check ebox control status reg */
#define OS$mc86_edpsr   44	/* 8600 mck EBOX control status register */
#define OS$mc86_cslint  45	/* 8600 mck console interrupt register */
#define OS$mc86_ibesr   46	/* 8600 mck IBOX error and status register */
#define OS$m86_ebxwd1   47	/* 8600 mck EBOX address word 1 */
#define OS$m86_ebxwd2   48	/* 8600 mck EBOX address word 2 */
#define OS$mc86_ivasav  49	/* Last IBOX virtual address */
#define OS$mc86_vibasav     50	/* Last Ibuffer virtual address */
#define OS$mc86_esasav  51	/* PC of instruction EBOX or FBOX processing at time of error */
#define OS$mc86_isasav  52	/* Virtual addr of instruction IBOX addr calc will process next */
#define OS$mc86_cpc     53	/* Virt addr os instruction IBOX addr calc will process next */
#define OS$mc86_mstat1  54	/* MBOX status reg 1 */
#define OS$mc86_mstat2  55	/* MBOX status reg 2 */
#define OS$mc86_mdecc   56	/* MBOX data ecc register */
#define OS$mc86_merg    57	/* MBOX error generation register for 8600 */
#define OS$mc86_cshctl  58	/* 8600 cache control reg */
#define OS$mc86_mear    59	/* 8600 mck memory error address */
#define OS$mc86_medr    60	/* 8600 mck memory error data register */
#define OS$mc86_fber    61	/* 8600 FBOX error register */
#define OS$mc86_cses    62	/* 8600 control store error status reg */
#define OS$ulpc         63	/* PC being processed at time of error */
#define OS$ulpsl        64	/* Program status longword at time of error */
#define OS$mc8_cpues    65	/* 780 mck cpu error status reg */
#define OS$mc8upc       66	/* 780 mck trapped uCode pc */
#define OS$mc8_vaviba   67	/* 780 mck virtual address */
#define OS$mc8_dreg     68	/* 780 mck D register */
#define OS$mc8_tber0    69	/* 780 mck tbuf register 0 */
#define OS$mc8_tber1    70	/* 780 mck tbuff reg 1 */
#define OS$mc8_timo     71	/* 780 mck timeout address reg */
#define OS$mc8_parity   72	/* 780 mck parity reg */
#define OS$mc8_sbier    73	/* 780 mck sbi error status reg */
#define OS$mc5va        74	/* 750 machine check virt addr */
#define OS$mc5_mdr      75	/* 750 mck mdr */
#define OS$mc5_svmode   76	/* 750 mck saved mode reg */
#define OS$mc5_rdtimo   77	/* 750 mck read lock timeout reg */
#define OS$mc5_tbgpar   78	/* 750 mck tbg parity reg */
#define OS$mc5_cacherr  79	/* 750 mck cache error register */
#define OS$mc5_buserr   80	/* 750 mck bus error reg */
#define OS$mc5_mcesr    81	/* 750 mck error status reg */
#define OS$mc1_parm1    82	/* uVAX1 parameter 1 reg */
#define OS$mc1_parm2    83	/* uVAX1 parameter 2 reg */
#define OS$mc1_vap      84	/* uVAX2 virtual address reg */
#define OS$mc1_int_st   85	/* uVAX2 internal state reg */
#define OS$mc88_mcsts   86	/* 8800 mck status reg */
#define OS$mc88_ipc     87	/* 8800 mck last Istream pc */
#define OS$mc88_vaviba  88	/* 8800 mck most recent virtual addr */
#define OS$mc88_iber    89	/* 8800 mck ibox error register */
#define OS$mc88_cber    90	/* 8800 mck CBOX error reg */
#define OS$mc88_eber    91	/* 8800 mck EBOX error reg */
#define OS$mc88_nmifsr  92	/* NMI fault summary reg */
#define OS$mc88_nmiear  93	/* NMI error address register */
#define OS$mc82_parm1   94	/* 8200 parameter 1 reg */
#define OS$mc82_va      95	/* 8200 mck virtual address at error */
#define OS$mc82_vap     96	/* 8200 mck prime virtual addr reg */
#define OS$mc82_mar     97	/* 8200 mck memory address reg */
#define OS$mc82_stat    98	/* 8200 mck status reg */
#define OS$mc82_pcfail  99	/* 8200 mck pc at time of failure */
#define OS$mc82_upcfail     100	/* 8200 mck uPC at time of failure */
#define OS$sbiawer      101	/* 780 sbi/async write error reg */
#define OS$sbiaw_toa    102	/* 780 sbi/async write timeout address reg */
#define OS$sbiaw_fs     103	/* 780 sbi/async write fault status reg */
#define OS$sbiaw_sc     104	/* 780 sbi/async write silo compare reg */
#define OS$sbiaw_mt     105	/* 780 sbi/async write maintenance reg */
#define OS$sbia_ioaba   106	/* 8600 SBI error IOA base address */
#define OS$sbia_dmacid  107	/* 8600/8650 sbi error dmac id reg */
#define OS$sbia_dmacca  108	/* 8600/8650 dmac command/address register */
#define OS$sbia_dmabid  109	/* 8600/8650 sbi error dmab id reg */
#define OS$sbia_dmabca  110	/* 8600/8650 dmab command/address register */
#define OS$sbia_dmaaid  111	/* 8600/8650 dmaa id reg */
#define OS$sbia_dmaaca  112	/* 8600/8650 dmaa command/address reg */
#define OS$sbia_dmaiid  113	/* 8600/8650 dmai id reg */
#define OS$sbia_dmaica  114	/* 8600/8650 dmai command/address reg */
#define OS$sbia_ioadc   115	/* 8600/8650 diagnostic control register */
#define OS$sbia_ioaes   116	/* 8600/8650 error summary register */
#define OS$sbia_ioacs   117	/* 8600/8650 control status reg */
#define OS$sbia_ioacf   118	/* 8600/8650 configurations register */
#define OS$sbia_er      119	/* 8600/8650 error register */
#define OS$sbia_to      120	/* 8600/8650 timeout address register */
#define OS$sbia_fs      121	/* 8600/8650 fault status register */
#define OS$sbia_sc      122	/* 8600/8650 silo compare register */
#define OS$sbia_mr      123	/* 8600/8650 maintenance register */
#define OS$uba_cf       124	/* UBA configuration reg */
#define OS$uba_cr       125	/* UBA control register */
#define OS$uba_sr       126	/* UBA status register */
#define OS$uba_dcr      127	/* UBA diagnostic control register */
#define OS$uba_fmer     128	/* UBA failed map entry reg */
#define OS$uba_fubar    129	/* UA failed unibus address reg */
#define OS$stray_ipl    130	/* Stray Interrupt IPL */
#define OS$stray_vec    131	/* Stray Interrupt Vector */
#define OS$exptflt_va   132	/* Exception Fault virtual address */
#define OS$pnc_asc      133	/* Panic Ascii message */
#define OS$pnc_sp       134	/* Panic stack pointer */
#define OS$pnc_ap       135	/* Panic argument pointer */
#define OS$pnc_fp       136	/* panic frame pointer */
#define OS$pnc_pc       137	/* Panic PC */
#define OS$pnc_ksp      138	/* Panic kernel stack pointer */
#define OS$pnc_usp      139	/* panic user stack pointer */
#define OS$pnc_isp      140	/* Panic interrupt stack pointer */
#define OS$pnc_p0br     141	/* Panic P0 base register */
#define OS$pnc_p0lr     142	/* Panic P0 length register */
#define OS$pnc_p1br     143	/* Panic P1 base register */
#define OS$pnc_p1lr     144	/* Panic P1 length register */
#define OS$pnc_sbr      145	/* Panic system base register */
#define OS$pnc_slr      146	/* Panic system length register */
#define OS$pnc_pcbb     147	/* Panic process control block base register */
#define OS$pnc_scb      148	/* Panic system control block base register */
#define OS$pnc_ipl      149	/* Panic IPL register */
#define OS$pnc_astlvl   150	/* Panic AST level register */
#define OS$pnc_sisr     151	/* Panic software interrupt status register */
#define OS$pnc_iccs     152	/* Panic interval clock ctrl/status register */
#define OS$kernstk0     153	/* Panic kernel stack 0 */
#define OS$subid_class  154	/* Raw os classification of event */
#define OS$subid_type   155	/* error type classification */
#define OS$subid_ctldevtyp  156	/* controller/device type */
#define OS$elmem_cnt    157	/* Number of memory error structures in memory error */
#define OS$elmem_ctrlr  158	/* memory controller number */
#define OS$memerr_numerr    159	/* Number of errors at this address */
#define OS$memerr_reg0  160	/* mem error reg 0 */
#define OS$memerr_reg1  161	/* memory error reg 1 */
#define OS$memerr_reg2  162	/* memory error reg 2 */
#define OS$memerr_reg3  163	/* memory error reg 3 */
#define OS$mc5_errpc    164	/* PC at error for 750 machine check */
#define OS$adptyp       165	/* Type of adapter */
#define OS$bi_bus_num   166	/* BI bus number */
#define OS$bi_dev       167	/* BI device register */
#define OS$bus_bicsr    168	/* BI CSR */
#define OS$bi_ber       169	/* BI Bus Error reg */
#define OS$bua_csr      170	/* BUA CSR */
#define OS$bua_fubar    171	/* FUBAR for bua */
#define OS$bustyp       172	/* Type of bus associated with error */
#define OS$bi_errint_ctl    173	/* BI Bus Error Interrupt Control reg */
#define OS$bi_int_dest  174	/* BI Bus Interrupt Destination Reg */
#define OS$bi_bs_num    175	/* BI bus number for bus error */
#define OS$devhdr_dev   176	/* Major/minor Device numbers */
#define OS$devhdr_bcount    177	/* Transfer byte count */
#define OS$devhdr_blkno     178	/* Logical Block No */
#define OS$devhdr_retry     179	/* retry count */
#define OS$devhdr_herrcnt   180	/* hard error count */
#define OS$devhdr_serrcnt   181	/* soft error count */
#define OS$devhdr_csr   182	/* Device CSR */
#define OS$msglg_cmdref     183	/* MSCP Command Ref # */
#define OS$msglg_unit   184	/* MSCP Unit Number */
#define OS$msglg_seqnum     185	/* MSCP Errlog Packet Sequence number */
#define OS$msglg_format     186	/* MSCP Format Field */
#define OS$msglg_flags  187	/* MSCP Error Log Packet Flags field */
#define OS$msglg_event  188	/* MSCP Err log pkt event code field */
#define OS$msglg_stat   189	/* MSCP Err Log Pkt Status and Event code field */
#define OS$msglg_cntid1     190	/* MSCP Err Pkt Controller ID unique id field */
#define OS$msglg_cntid2     191	/* MSCP Controller and Model fields */
#define OS$msglg_cntsvr     192	/* Controller Software rev */
#define OS$msglg_cnthvr     193	/* controller hardware rev */
#define OS$msglg_multunt    194	/* MSCP Err Pkt Multi-Unit # */
#define OS$msglg_unitid1    195	/* Unique ID # for unit */
#define OS$hmem_addr    196	/* Host Memory Address */
#define OS$msglg_unitid2    197	/* Unit identifier, ids specific unit */
#define OS$msglg_unitsvr    198	/* Unit Software rev */
#define OS$msglg_unithvr    199	/* Unit Hardware rev */
#define OS$msglg_group  200	/* disk cylinder */
#define OS$retlvl       201	/* Last Processing Level and Retry Count */
#define OS$repl_flg     202	/* Bad Block Replacement Flags */
#define OS$msglg_volser     203	/* Volume Serial Number */
#define OS$msglg_hdr    204	/* Disk Header Code */
#define OS$sdi_req_byte     205	/* SDI Request Byte */
#define OS$sdi_mode_byte    206	/* SDI Mode Byte */
#define OS$sdi_err_byte     207	/* SDI Error Byte */
#define OS$sdi_ctrlr_byte   208	/* SDI Controller Byte */
#define OS$msglg_badlbn     209	/* Bad LBN */
#define OS$sdi_retry    210	/* Retry Count */
#define OS$ra6_prev_cyl     211	/* RA60 Cylinder accessed prior to error */
#define OS$ra6_prev_hd  212	/* RA60 Head being used prior to error */
#define OS$curr_cyl     213	/* Cylinder being accessed at time of error */
#define OS$curr_hd      214	/* Head accociated with error */
#define OS$fp_cod       215	/* Front Panel Error code */
#define OS$msglg_cause  216	/* cause of Logical Block Replacement */
#define OS$sdi_last_op  217	/* Last Opcode processed by drive */
#define OS$sdi_drv_det  218	/* Drive Detected SDI Error reg */
#define OS$led_code     219	/* LED Code */
#define OS$tmsglg_event     220	/* TMSCP Event Code */
#define OS$tmsglg_stat  221	/* TMSCP Event and Status Code */
#define OS$tmsglg_unitid2   222	/* Unit Id for TMSCP */
#define OS$tmsglg_posit     223	/* Tape Position at error */
#define OS$tmsglg_fmtsvr    224	/* TMSCP Format Software Rev */
#define OS$tmsglg_fmthvr    225	/* TMSCP Format Hardware Regv */
#define OS$sti_get_xtd_drv1 226	/* STI Get Extended Drive Status Word 1 */
#define OS$sti_gt_st_gap    227	/* STI Get Xtd drive status gap count */
#define OS$sti_get_xtd_drv3 228	/* STI Get xtd drive status word 3 */
#define OS$sti_get_xtd_drv4 229	/* nil */
#define OS$sti_get_xtd_drv5 230	/* STI get xtd drive status word 5 */
#define OS$sti_get_xtd_drv6 231	/* STI get xtd drive status word 6 */
#define OS$sti_get_xtd_drv7 232	/* sti get xtd drive sts word 7 */
#define OS$sti_get_xtd_drv8 233	/* nil */
#define OS$sti_get_xtd_drv9 234	/* nil */
#define OS$sti_get_xtd_drv10    235	/* nil */
#define OS$sti_get_xtd_drv11    236	/* nil */
#define OS$sti_get_xtd_drv12    237	/* nil */
#define OS$sti_get_xtd_drv13    238	/* nil */
#define OS$sti_get_xtd_drv14    239	/* nil */
#define OS$sti_get_xtd_drv15    240	/* nil */
#define OS$sti_get_xtd_drv16    241	/* nil */
#define OS$sti_summ_info    242	/* STI Unsuccessful Response Summary Info */
#define OS$sti_drv0_info    243	/* drive 0 info from sti unsucc resp */
#define OS$sti_drv1_info    244	/* drive 1 info from sti unsucc resp */
#define OS$sti_drv2_info    245	/* driv 2 info from sti unsucc resp */
#define OS$sti_drv3_info    246	/* drive 3 resp from sti unsucc resp */
#define OS$sti_fmt_errlog1  247	/* sti xtd formatter sts word 1 */
#define OS$sti_fmt_errlog2  248	/* sti xtd fmt sts wrd 2 */
#define OS$sti_fmt_errlog3  249	/* sti xtd format sts word 3 */
#define OS$sti_fmt_errlog4  250	/* sti xtd fmt sts wrd 4 */
#define OS$sti_fmt_errlog5  251	/* sti xtd fmt sts wrd 5 */
#define OS$dsa_var1     252	/* Variable information from dsa devs */
#define OS$dsa_var2     253	/* nil */
#define OS$dsa_var3     254	/* nil */
#define OS$dsa_var4     255	/* nil */
#define OS$dsa_var5     256	/* nil */
#define OS$dsa_var6     257	/* nil */
#define OS$dsa_var7     258	/* nil */
#define OS$dsa_var8     259	/* nil */
#define OS$dsa_var9     260	/* nil */
#define OS$dsa_var10    261	/* nil */
#define OS$dsa_var11    262	/* nil */
#define OS$dsa_var12    263	/* nil */
#define OS$dsa_var13    264	/* nil */
#define OS$dsa_var14    265	/* nil */
#define OS$dsa_var15    266	/* nil */
#define OS$dsa_var16    267	/* nil */
#define OS$dsa_var17    268	/* nil */
#define OS$dsa_var18    269	/* nil */
#define OS$dsa_var19    270	/* nil */
#define OS$dsa_var20    271	/* End of DSA variable info */
#define OS$msglg_oldrbn     272	/* RBN Used in a previous bad blk replacement */
#define OS$msglg_newrbn     273	/* RBN Used for this bad blk replacement (if any) */
#define OS$msglg_bdlbn  274	/* Bad LBN */
#define OS$dsa_cont_err     275	/* Controlle/xfer error original error */
#define OS$dsa_cnt_rec_flgs 276	/* Controller/xfer error error flags */
#define OS$dsa_cnt_rta  277	/* Controller/xfer retry cnt, level A */
#define OS$dsa_cnt_rtb  278	/* Controller/xfer retry cnt, level B */
#define OS$dsa_cnt_dat_mem_ad   279	/* Controller/xfer buffer data memory address */
#define OS$dsa_ctl_addl_info    280	/* I don't know. The spec is totally unclear abt it! */
#define OS$msg_fmt      281	/* Format field of MSCP Error log packet */
#define OS$sbiflt       282	/* SBI SPECIFIC FAULT */
#define OS$memory_type  283	/* TYPE OF MEMORY */
#define OS$ctlerr       284	/* 0 */
#define OS$ctltyp       285	/* Ids Particular device/bus controller */
#define OS$ctlsyn       286	/* ids coarsesyndrome from controller type errors */
#define OS$ulsilo110    287	/* SILO REG 110 */
#define OS$bla_csr      288	/* bla csr */
#define OS$nmiflt_nbia0     289	/* NMI BI ADAPTER FOR BI 0 */
#define OS$nmiflt_nbia1     290	/* NMI BI ADAPTER FOR BI 1 */
#define OS$nmiadp_nbiacsr0  291	/* CSR0 FOR THE NMI BI ADAPTER */
#define OS$nmiadp_nbiacsr1  292	/* CSR1 FOR THE NMI BI ADAPTER */
#define OS$bi1_ber      293	/* BI BUS ERROR REGISTER. FOR NMI ADAPTER ERROR IS BI BUS 1 */
#define OS$ci_lname     294	/* CI LOGGED PKT LOCAL SYSTEM NODE NAME */
#define OS$ci_port      295	/* CI LOGGED PKT DEST PORT */
#define OS$ci_status    296	/* STATUS OF MESSAGE */
#define OS$ci_opcode    297	/* COMMAND OPERATION CODE */
#define OS$ci_flags     298	/* CI LOGGED PKT FLAGS */
#define OS$ci_rreason   299	/* REMOTE REASON PATH CRASH */
#define OS$ci_local     300	/* LOCAL CI PPD VERSION */
#define OS$ci_remote    301	/* REMOTE CI PPD VERSION */
#define OS$ci_kname     302	/* KNOWN SYSTEM NODE NAME */
#define OS$ci_lsaddr    303	/* Known system id # in databas collision */
#define OS$uqtyp        304	/* UQ Controller Types */
#define OS$sa_reg       305	/* SA Register for UQ port Errors */
#define OS$blatyp       306	/* BLA type device controller */
#define OS$cityp        307	/* CI Port type */
#define OS$ci_errcode   308	/* CI Error code */
#define OS$ci_nerrs     309	/* Number of errors reported by ci */
#define OS$ci_reinits   310	/* number of CI reinits */
#define OS$ci_pcnf      311	/* CI Port config reg */
#define OS$ci_pmcsr     312	/* CI Port maintenance csr */
#define OS$ci_psr       313	/* CI Port Status reg */
#define OS$ci_pfaddr    314	/* CI Port Failing Address */
#define OS$ci_ppr       315	/* CI Port Parameter Register */
#define OS$ci_per       316	/* CI Port Error Register */
#define OS$ci_addr      317	/* Faulty Ucode Address */
#define OS$ci_bvalue    318	/* Bad CI Ucode */
#define OS$ci_gvalue    319	/* Good Ucode */
#define OS$ci_lsysid    320	/* CI Local System ID */
#define OS$ci_rsaddr    321	/* CI Remote System Address */
#define OS$ci_rsysid    322	/* CI Remote System Id */
#define OS$ci_rname     323	/* Remote host node name */
#define OS$ci_ksysid    324	/* Data base collision known sys id */
#define OS$bvptyp       325	/* Type of BVP Controller (AIE or AIO) */
#define OS$bvp_pstatus  326	/* BVP Port Control Register */
#define OS$bi_addr      327	/* BI Address when BI error is associated with BVP error */
#define OS$bvp_perr     328	/* BVP Port Error reg */
#define OS$bvp_data     329	/* BVP Data Reg */
#define OS$bvp_pcntl    330	/* BVP Port Controller Reg */
#define OS$startup_msg  331	/* Startup Message */
#define OS$pnc_kern_stk     332	/* Panic Kernel stack */
#define OS$pnc_int_stk  333	/* Panic Interrupt Stack */
#define OS$nmiflt_silo  334	/* NMIFLT Silo Regs */
#define OS$sbiawsilo    335	/* SBI/Asynchr Write silo regs */
#define OS$sbiawcsr     336	/* SBI/Asynchr Write CSR regs */
#define OS$mscp_ctltyp  337	/* MSCP Controller types */
#define OS$mcspctl      338	/* MSCP COntroller Ids for devclass */
#define OS$sxerr_acp_csr    339	/* LYNX specific CSR for Lynx/Shadowfax info */
#define OS$sxerr_diag_reg   340	/* LYNX specific Diag register */
#define OS$sxerr_subtst     341	/* Failing subtest Number for LYNX/Shadowfax Failure */
#define OS$sxerr_info   342	/* LYNX/Shadowfax Error Information */
#define OS$sdi_rtpi     343	/* Real Time Port Image bit in RA70 extended status info */
#define OS$sdi_drv_state    344	/* Drive State Byte for RA70 extended status info */
#define OS$new_mem_type     345	/* Memory types fo newer machines */
#define OS$mem_type     346	/* Memory Type used to derive memory from subid_type fld */
#define OS$mck_dev      347	/* CPU id for machine checks */
#define OS$mck_stk      348	/* Machine Check type id for subsets of Nautilus and Scorpio */
#define OS$ctlr_var1    349	/* 1st word of controller dep info in mscp ctlr err */
#define OS$ci_prot_addl_info    350	/* Additional Info for Logged Pkt Protocol error */
#define OS$ci_addl_prot     351	/* Additional Short for CI Protocol Error */
#define OS$ci_coll_addl_info    352	/* Additiona CI Collision data */
#define OS$ci_lpkt_addl_info    353	/* Additional Logged Packet Logged packet info */

/* OS-SEGMENT id codes */
#define OS$os_header    22	/* Generic OS header */
#define OS$bibus_node_regs  23	/* BI Bus error registers for each node on BI */
#define OS$fill_header  24	/* Filler segment for header */
#define OS$fill_subid   25	/* Filler segment for subid */
#define OS$fill_bimisc  26	/* Filler for BI Bus error: bi number and cnt of structures */
#define OS$fill_biregs  27	/* Filler segment for BI regs */
#define OS$fill_bilast  28	/* Filler segment for bi pc and psl */
#define OS$bi_last_seg  29	/* Last 2 elements in bi bus errors */
#define OS$dsa_disk_generic 30	/* Generic DSA Disk Info */
#define OS$dsa_tape_generic 32	/* Generic DSA tape info */
#define OS$dsa_disk_addl_info   33	/* Additional DSA Disk info */
#define OS$cnt_xfr_seg  34	/* Controller/Xfer specific error info */
#define OS$sdi_generic_seg  35	/* SDI Generic info */
#define OS$dsa_variable_seg 36	/* Controller/Drive Dependent Info with no defs */
#define OS$devhdr_seg   37	/* Device (disk and tape) generic header info */
#define OS$dsa_tape_addl_info   39	/* Additional Info for DSA tapes */
#define OS$bibus_gen_seg    40	/* BI Bus error top segment */
#define OS$mem_gen_seg  42	/* GENERIC MEMORY ERROR DESCRIPTION */
#define OS$ascii_msg_seg    43	/* ASCII MESSAGE SEGMENT (ACTUALLY WHOLE RECORD) */
#define OS$silo_reg_seg1    44	/* SILO REGISTERS SEG 1 */
#define OS$bvp_gen_seg  56	/* Generic BVP Error segment */
#define OS$mscp_devhdr_seg  57	/* MSCP devhdr and MSGLG hdr */
#define OS$ci_gen_seg   59	/* Generic CI segment */
#define OS$ci7_dattn_regs   61	/* CI Data Attention regs for CI780/750 */
#define OS$cibci_dattn_regs 63	/* Data attention regs for CIBCI */
#define OS$cibca_dattn_regs 64	/* CIBCA Data Attention Regs */
#define OS$ci_dattn_ucode   65	/* CI Data Attention uCode info */
#define OS$ci_lpkt_common   66	/* CI Logged Packet common info */
#define OS$ci_lpkt_lpkt     67	/* CI Logged packet specific info */
#define OS$ci_lpkt_prot     68	/* CI Logged packet protocol info */
#define OS$ci_lpkt_collis   69	/* CI Logged Packet Collision ingo */
#define OS$gen_mem_seg  70	/* Generic Memory Error Segment for subtypes of Naut and Scorpio */
#define OS$mscp_ctlr_info   72	/* Controller dependen info */
#define OS$dsa_memctl_generic   73	/* Memoty and controlle error generic segment */

/* OS-RECORD id codes */
#define OS$info_msg     1	/* Ascii informational message (Includes devices not yet supported in binary) */
#define OS$time_stamp   1	/* Time stamp */
#define OS$memory_error     278	/* Memory error */
#define OS$mach_chk_8600    4	/* 8600 Machine Check */
#define OS$mach_chk_8200    5	/* 8200 Machine Check */
#define OS$mach_chk_8800    6	/* 8800 Machine Check */
#define OS$mach_chk_780     1	/* 780 Machine Check */
#define OS$mach_chk_750     2	/* 750 Machine Check */
#define OS$mach_chk_uvi     7	/* uVI amchine check */
#define OS$mach_chk_uvii    8	/* uVII Machine Check */
#define OS$sbi_780      1	/* 780 SBI Error */
#define OS$asyncwr_780  1	/* 780 Asynchronouw Write Error */
#define OS$sbi_8600     2	/* 8600 SBI Error */
#define OS$uba_780      1	/* 780 UBA error */
#define OS$stray_interrupt  1	/* Stray Interrupt */
#define OS$excpt_flt    1	/* exception/fault error */
#define OS$sys_startup  1	/* System Startup Entry */
#define OS$sys_shutdown     1	/* System Shutdown */
#define OS$snap_8600    1	/* 8600 snapshot take entry */
#define OS$snap_8650    1	/* 8650 Snapshot Occurred entry */
#define OS$panic_msg    1	/* Panic (bugchk) */
#define OS$bi_bus_error     3	/* BI bus error record */
#define OS$bua_adapter_error    2	/* BUA Adapter Error */
#define OS$bi1_bus_err  101	/* first bi bus error */
#define OS$bi2_bus_err  102	/* BI buss err 2 */
#define OS$bi3_bus_err  103	/* bi 3 bus err */
#define OS$bi4_bus_err  104	/* BI Bus error subtype 104 */
#define OS$bi5_bus_err  105	/* BI BUS error subtype 105 */
#define OS$bi6_bus_err  106	/* BI BUS error subtype 106 */
#define OS$bi7_bus_err  107	/* BI BUS Error subtype 107 */
#define OS$bi8_bus_err  108	/* bi bus err subtype 108 */
#define OS$bi9_bus_err  109	/* bi bus error subtype 109 */
#define OS$bi10_bus_err     110	/* bi bus err subtype 110 */
#define OS$bi11_bus_err     111	/* bi bus err subtype 111 */
#define OS$bi12_bus_err     112	/* bi bus err subtype 112 */
#define OS$bi13_bus_err     113	/* bi bus err subtype 113 */
#define OS$bi14_bus_err     114	/* bi bus err subtype 114 */
#define OS$bi15_bus_err     115	/* bi bus err subtype 115 */
#define OS$bi16_bus_err     116	/* bi bus err subtype 116 */
#define OS$disk_host_mem_err    8	/* DSA Disk Memory Access Error */
#define OS$tape_host_mem_err    1	/* DSA Tape Memory Address Error */
#define OS$disk_controller_error    2	/* DSA Disk Controller Error */
#define OS$tape_controller_error    2	/* DSA Tape Controller Error */
#define OS$ra60_sdi     3	/* RA60 SDI Error */
#define OS$ra8_dsk_sdi  4	/* RA8 Type disks SDI error */
#define OS$small_dsk_err    5	/* DSA Small Disk Errors */
#define OS$dsk_transfer_err 6	/* DSA Disk Transfer Error */
#define OS$bad_blk_replace  7	/* DSA Disk Bad Block Replacement record */
#define OS$tape_xfer_err    3	/* DSA Tape Transfer Error */
#define OS$sti_comm_err     4	/* DSA STI Communic/Cmd Failure Error */
#define OS$sti_drv_err  5	/* DSA STI Drive Error Log */
#define OS$sti_get_format   6	/* DSA STI Get Formatter Error */
#define OS$mem_c780     1	/* MS780C MEMORY ERROR */
#define OS$mem_e780     2	/* MS780E MEMORY ERROR */
#define OS$mem_750      3	/* MS750 MEMORY ERROR */
#define OS$mem_8600     5	/* 8600 MEMORY ERROR */
#define OS$mem_8800     7	/* 8800 MEMORY ERROR */
#define OS$mem_8200     6	/* 8200 MEMORY ERROR */
#define OS$diag_msg     1	/* DIAGNOSTIC MESSAGE */
#define OS$repair_msg   1	/* REPAIR MESSAGE */
#define OS$bla_err      4	/* BLA Error */
#define OS$nmiflt_err   4	/* NMI fault bus error */
#define OS$nmi_adapter_err  4	/* nmi bi adapter fault */
#define OS$bvp_bier_rec     1001	/* BVP error when bi bus error associated with it */
#define OS$bvp_reg_rec  1002	/* BVP error when no bi error */
#define OS$ci_gen_rec   101	/* Generic CI record */
#define OS$ci_dattn_common  102	/* CI780/750 Data Attention common record */
#define OS$cibi_common  104	/* Generic CI BI related errors */
#define OS$cici_dattn_common    105	/* cibci data attn msg */
#define OS$cibca_dattn_common   106	/* cibca data attention message */
#define OS$ci7_ucode_dattn  107	/* CI780/750 uCode info */
#define OS$cibci_ucode_dattn    108	/* CIBCI Data Attn uCode info */
#define OS$cibca_ucode_dattn    109	/* CIBCA Data Attn uCode info */
#define OS$ci_common_lpkt   110	/* ci logged pakcet info with nothing else */
#define OS$ci_prot_lpkt     111	/* CI Logged Packet Protocol Info */
#define OS$ci_collis_lpkt   112	/* CI Logged Packet Info with Collision Info */
#define OS$ci_logged_lpkt   113	/* CI Logged Packet Info with specific logged packet info */
#define OS$uq_port_err  3	/* UQSSP Port Attention Errors */
#define OS$mvax2_mem_err    8	/* UVAXII Memory error */
#define OS$mscp_disk_ctlr_err   6	/* MSCP Disk Controller Error */
#define OS$mscp_tape_ctrlr_err  7	/* MSCP Tape Controller Error */
#define OS$uda5x_attn_err   2	/* UDA5X Port Attenntion Error */
#define OS$kdb50_attn_err   18	/* Kdb50 port attention error */
#define OS$mach_chk_730     3	/* 730 MACHINE CHECK */
#define OS$vstar_mem_err    9	/* VAX Star memory error */
#define OS$mem_730      4	/* 730 Memory Error */
#define OS$ra82_dsk_sdi     8	/* RA82 SDI Error */
#define OS$ra70_dsk_sdi     9	/* RA70 SDI Error */
#define OS$ra90_dsk_sdi     10	/* RA90 SDI Error */
#define OS$mem_8300     10	/* 8300 Memory Error */
#define OS$mem_8500     11	/* 8500 Memory Error */
#define OS$mem_8550     12	/* 8550 Memory Error */
#define OS$mem_8700     13	/* 8700 Memory Error */
#define OS$mach_chk_8300    9	/* 8300 Machine Check */
#define OS$mach_chk_8500    10	/* 8500 Machine Check */
#define OS$mach_chk_8550    11	/* 8550 machine check */
#define OS$mach_chk_8700    12	/* 8700 machine check */
#define OS$lynx_acp_sxerr   1003	/* LYNX/ACP/SHADOWFAX Error */
#define OS$rc25_attn_err    1	/* RC25 Device Attention Error */
#define OS$tk57_attn_err    14	/* TK50/70 Attention Error */

/* STRUCTURE DEFINITIONS FOR THE OPERATING SYSTEM DSD TABLES */

/* Structure definition for an operating system data-item code */
typedef struct {
  long		OS_CODE;
  short	        STD_CODE;
}
 DD$OS_CODE, *DD$OS_CODE_PTR;

/* STRUCTURE DEFINITIONS FOR THE OPERATING SYSTEM DSD TABLES  cont. */

/* Structure definition for the operating system data-item DSD table */
typedef struct {
  short		  ID;
  DD$BYTE	  TYPE;
  short	          COUNT;	/* Coded item count or item byte length */
  DD$OS_CODE_PTR  MAP;
}
 DD$OS_ITEM_DSD, *DD$OS_ITEM_DSD_PTR;


/* Structure definition for the operating system element table */
typedef struct {
    short	OS_EL_FLD1;
    short	OS_EL_FLD2;
}
 DD$OS_ELEMENT, *DD$OS_ELEMENT_PTR;


/* Structure definition for the operating system data-segment DSD table */
typedef struct {
  short		      ID;
  short		      ELEMENT_COUNT;
  DD$OS_ELEMENT_PTR   ELEMENT;
}
 DD$OS_SEGMENT_DSD, *DD$OS_SEGMENT_DSD_PTR;


/* Structure definition for the operating system data-record DSD table */
typedef struct {
  short		      TYPE;
  short		      SUBTYPE;
  short		      ELEMENT_COUNT;
  DD$OS_ELEMENT_PTR   ELEMENT;
}
 DD$OS_RECORD_DSD, *DD$OS_RECORD_DSD_PTR;

/* STRUCTURE DEFINITIONS FOR THE OPERATING SYSTEM DSD TABLES  cont. */

/* Operating System Data Structure Definition Context Structure */
typedef struct {
  /* Table access function information */
  int			CTX_type;	   /* Not for use by application */
  int			current_element;   /* Not for use by application */
  /* O/S event information */
  DD$BYTE 		*event_ptr;	   /* Pointer to current O/S event */
  int			event_type;	   /* Generated DSD table key */
  int			event_subtype;	   /* Generated DSD table sub-key */
  DD$OS_RECORD_DSD_PTR	event_DSD_ptr;	   /* Pointer to current record DSD */
  /* Data-item information */
  DD$BYTE		*item_ptr;	   /* Pointer to current data-item */
  DD$OS_ITEM_DSD_PTR	item_DSD_ptr;	   /* Pointer to current item DSD */
}
 DD$OS_DSD_CTX, *DD$OS_DSD_CTX_PTR;


/* End of ultrix_dsd.h */
