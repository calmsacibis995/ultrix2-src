/*  sccsid  =  @(#)std_dsd.h	1.11   (ULTRIX)   1/29/87  */
/*
**	.title Standard DSD definitions
**	.ident / 1.14 /
**
**
**	  File:	std_dsd.h
** Description:	Standard DSD definitions
**	Author:	Bob Winant
**	  Date:	8-Oct-1986
**
**
**	Copyright 1986, Digital Equipment Corporation
**
**
**++
**	These definitions were generated by the DSD Editor / Compiler
**--
*/



#define STD_DSD_FILE_FORMAT 2

/* Miscellaneous definitions needed for the DSD access functions */

#define DD$HEADER_BYTES 8		/* Size of standard header */
#define DD$MAX_SEGMENT_ELEMENTS 512	/* Max elements excluding the header */
#define DD$VALID_CODE_SIZE 2		/* Size in bits of a validity code */

#define DD$ELEMENT_COUNT dsd_context_pointer->segment_DSD_ptr->ELEMENT_COUNT
#define DD$VALID_BITS(COUNT)    ( (COUNT + 1) * DD$VALID_CODE_SIZE)
#define DD$VALID_BYTES(COUNT)   ( (DD$VALID_BITS(COUNT) +7) / 8)

/* STD-ITEM id codes */
#define DD$eventtype    21	/* Raw OS event descriptor */
#define DD$recordnumber     22	/* Sequence number of event in raw file */
#define DD$ostype       23	/* Type of OS event occurred on */
#define DD$datetime     24	/* y */
#define DD$uptime       25	/* SYS uptime since last crash/reload */
#define DD$serialnumber     26	/* System serial number */
#define DD$eventclass   27	/* General (top level) classification of event */
#define DD$hostname     28	/* Ascii id of system event occurred on */
#define DD$devclass     29	/* Class of device/unit */
#define DD$devtype      30	/* Unit type description for EIMS */
#define DD$coarsesyndrome   31	/* Coarse syndrome id of event (for now it's the subid_type of raw evt) */
#define DD$controller   32	/* Device/unit Controller number */
#define DD$unitnumber   33	/* Device Unit number as reported by OS */
#define DD$serialid     34	/* Device/unit serial number id */
#define DD$mediaid      35	/* Media name associated with device */
#define DD$message      36	/* Ascii message string for a message event */
#define DD$m86ehm       37	/* nil */
#define DD$m86ebcs      38	/* nil */
#define DD$m86edpsr     39	/* nil */
#define DD$m86ibesr     40	/* nil */
#define DD$m86ms1       41	/* nil */
#define DD$m86ms2       42	/* nil */
#define DD$m86mdecc     44	/* nil */
#define DD$mcbcnt       45	/* nil */
#define DD$m86evmqsav   46	/* nil */
#define DD$m86cslint    47	/* nil */
#define DD$m86ew1       48	/* nil */
#define DD$m86ew2       49	/* nil */
#define DD$m86ivasav    50	/* Last virt add calculated and acknowledged by MBOX */
#define DD$m86vibasav   51	/* Last Ibuffer virt addr acknowledged by MBOX */
#define DD$m86esasav    52	/* PC of instruction EBOX or FBOX processing at time of error */
#define DD$m86isasav    53	/* Virt Address of instr IBOX Addr Calc Unit processing at time of error */
#define DD$m86cpc       54	/* Virtual addr of instruction IBOX Addr Calc will process next */
#define DD$m86merg      55	/* nil */
#define DD$m86cshctl    56	/* nil */
#define DD$m86mear      57	/* Memory error address register */
#define DD$m86medr      58	/* Data word being processed when MBOX error detected */
#define DD$m86fber      59	/* nil */
#define DD$m86cses      60	/* nil */
#define DD$pc           61	/* PC to be used in REI return */
#define DD$psl          62	/* nil */
#define DD$mcksumm      63	/* MCK Summary Register */
#define DD$mc8cpues     64	/* 780 CPU error status */
#define DD$mc8upc       65	/* nil */
#define DD$mc8vaviba    66	/* nil */
#define DD$mc8dreg      67	/* nil */
#define DD$mc8tb0       68	/* nil */
#define DD$mc8tb1       69	/* nil */
#define DD$mc8timo      70	/* nil */
#define DD$mc8par       71	/* nil */
#define DD$mc8sbier     72	/* nil */
#define DD$mc5va        73	/* nil */
#define DD$mc5erpc      74	/* nil */
#define DD$mc5mdr       75	/* ? */
#define DD$mc5sav       76	/* nil */
#define DD$mc5rdt       77	/* nil */
#define DD$mc5tbg       78	/* nil */
#define DD$mc5cache     79	/* nil */
#define DD$mc5bus       80	/* nil */
#define DD$mc5mce       81	/* nil */
#define DD$mc1pm1       82	/* uVAX Parameter Reg 1 */
#define DD$mc1pm2       83	/* uVAX parameter reg 2 */
#define DD$mc1vap       84	/* Most recent virtual address */
#define DD$mc1int       85	/* uVAX II Internal State Register */
#define DD$m88mcs       86	/* 8800 MCK status reg */
#define DD$m88ipc       87	/* nil */
#define DD$m88vaviba    88	/* nil */
#define DD$m88iber      89	/* 8800 IBOX Error register */
#define DD$m88cber      90	/* 8800 CBOX error register */
#define DD$m88eber      91	/* 8800 EBOX error register */
#define DD$m88nmf       92	/* Describes state of NMI fault wire */
#define DD$m88nme       93	/* Contains address that timed out on NMI */
#define DD$m82pm1       94	/* nil */
#define DD$m82va        95	/* nil */
#define DD$m82vap       96	/* nil */
#define DD$m82mar       97	/* nil */
#define DD$m82stat      98	/* nil */
#define DD$m82pcf       99	/* PC at time of failure */
#define DD$m82upc       100	/* uPC at time of failure */
#define DD$awer         101	/* 780 sbi/async write error register */
#define DD$awtoa        102	/* nil */
#define DD$awfs         103	/* 780 SBI/Async write fault status reg */
#define DD$awsc         104	/* nil */
#define DD$awmt         105	/* nil */
#define DD$ioaba        106	/* nil */
#define DD$dmacid       107	/* nil */
#define DD$dmacca       108	/* nil */
#define DD$dmabid       109	/* nil */
#define DD$dmabca       110	/* nil */
#define DD$dmaaid       111	/* nil */
#define DD$dmaaca       112	/* nil */
#define DD$dmaiid       113	/* nil */
#define DD$dmaica       114	/* nil */
#define DD$ioadc        115	/* nil */
#define DD$ioaes        116	/* nil */
#define DD$ioacs        117	/* nil */
#define DD$ioacf        118	/* nil */
#define DD$sbiaer       119	/* nil */
#define DD$sbiato       120	/* nil */
#define DD$sbiafs       121	/* nil */
#define DD$sbiasc       122	/* nil */
#define DD$sbiamr       123	/* nil */
#define DD$ubacf        124	/* nil */
#define DD$ubacr        125	/* nil */
#define DD$ubasr        126	/* nil */
#define DD$ubadcr       127	/* nil */
#define DD$ubafme       128	/* nil */
#define DD$ubafub       129	/* nil */
#define DD$stripl       130	/* Stray IPL For stray interrupts */
#define DD$strvec       131	/* Stray vector from stray interrupt */
#define DD$fltva        132	/* Exception/Fault virtual address */
#define DD$pncmes       133	/* Ascii Panic Message */
#define DD$pncsp        134	/* Panic stack pointer */
#define DD$structs      135	/* Number of memory error structures */
#define DD$ctrlr        136	/* Memory Controller number */
#define DD$errtyp       137	/* Memory error type */
#define DD$errcnt       138	/* nil */
#define DD$memer0       139	/* nil */
#define DD$memer1       140	/* nil */
#define DD$memer2       141	/* nil */
#define DD$memer3       142	/* nil */
#define DD$pncap        143	/* Argument pointer value at time of panic */
#define DD$pncfp        144	/* Frame pointer value at time of panic */
#define DD$pncksp       145	/* Panic kernel stack pointer */
#define DD$pncusp       146	/* Panic user stack pointer */
#define DD$pncisp       147	/* Panic int stack ptr */
#define DD$pncp0b       148	/* nil */
#define DD$pncp0l       149	/* nil */
#define DD$p1br         150	/* nil */
#define DD$p1lr         151	/* nil */
#define DD$pncp1b       152	/* nil */
#define DD$pncp1r       153	/* nil */
#define DD$pncsbr       154	/* System Base Register */
#define DD$pncslr       155	/* System Length Register */
#define DD$pncpcb       156	/* Process Control Block Base Reg */
#define DD$pncscb       157	/* System Control Block Base Reg */
#define DD$pncipl       158	/* nil */
#define DD$pncast       159	/* nil */
#define DD$pncsis       160	/* nil */
#define DD$pncicc       161	/* nil */
#define DD$cpunum       162	/* CPU number associated with a machine check (subid_num in raw record) */
#define DD$bibusnum     163	/* BI Bus number */
#define DD$bidevreg     164	/* BI Device Id Reg */
#define DD$bicsr        165	/* VAXBI Control and Status Reg */
#define DD$bibuserreg   166	/* VAXBI Bus Error Register */
#define DD$bierint      167	/* BI Error Interrupt Control Register */
#define DD$biintdst     168	/* BI Interrupt destination register */
#define DD$bibsnum      169	/* BI Bus number for BI Bus error */
#define DD$buacsr       170	/* BUA CSR */
#define DD$buafub       171	/* BUA failing unibus address */
#define DD$majmin       172	/* DEVICE MAJOR/MINOR NUMBERS */
#define DD$trsbcnt      173	/* TRANSFER BYTE COUNT */
#define DD$blkno        174	/* Device Logical Block Number */
#define DD$retrycnt     175	/* Number of retries */
#define DD$hard_errs    176	/* Number of hard errors on device */
#define DD$soft_errs    177	/* Number of soft errors on device */
#define DD$devcsr       178	/* Device CSR */
#define DD$cmdref       179	/* MSCP Command Reference Number */
#define DD$dsaunit      180	/* MSCP Unit Number */
#define DD$dsaseq       181	/* MSCP Error Packet Sequence Number */
#define DD$dsaformat    182	/* Format field of MSCP Error Packet */
#define DD$dsaflags     183	/* MSCP Flags field */
#define DD$event_code   184	/* Status and event code field, here just event code translt */
#define DD$dsastat      185	/* Event code and subcode defs */
#define DD$cntrlidnum   186	/* Controller Id number field */
#define DD$cntrlid      187	/* Controller id */
#define DD$csvrsn       188	/* Controller software rev */
#define DD$chvrsn       189	/* Controller hardware rev */
#define DD$multi_unit   190	/* Multi-unit code */
#define DD$unitid1      191	/* Unique id of unit */
#define DD$hmemaddr     192	/* Host memory address */
#define DD$unitid2      193	/* Unit identifier */
#define DD$usvrsn       194	/* Unit Software rev */
#define DD$ushvrsn      195	/* Unit Hardware Rev */
#define DD$cylinder     196	/* Cylinder associated with error */
#define DD$std_retlvl   197	/* Retry/Level register */
#define DD$replflg      198	/* Bad Block Replacement Flags */
#define DD$volsernum    199	/* Volume serial number */
#define DD$hdrcod       200	/* Header code fiels */
#define DD$sd1stat      201	/* SDI Status Word 1 */
#define DD$badlbn       202	/* Bad LBN from Bad Block Replacement */
#define DD$sd2stat      203	/* SDI Status word 2 for RA60 errors */
#define DD$oldrbn       204	/* RBN that was used in a previous replacement */
#define DD$sd3stat      205	/* SDI status word 3 for RA60 */
#define DD$newrbn       206	/* RBN used for bad block replacement */
#define DD$cause        207	/* Reason for Bad Block Replacement */
#define DD$sdireqbyte   208	/* SDI Request Byte */
#define DD$sdimodbyte   209	/* SDI Mode Byte */
#define DD$sdierrbyte   210	/* SDI Error Byte */
#define DD$sdictlbyte   211	/* SDI Controller Byte */
#define DD$sdiret       212	/* Retry count of failure code depending on DF bit in Error byte */
#define DD$ra6prvcyl    213	/* Cylinder accessed just prior to error */
#define DD$ra6prvhd     214	/* Head accessed prior to error */
#define DD$curcyl       215	/* Cylinder being accessed at time of error */
#define DD$curhd        216	/* Head associated with error */
#define DD$sdilstop     217	/* Last OPCODE decoded by drive */
#define DD$sdidrvdet    218	/* Drive Detected SDI Error Info */
#define DD$led          219	/* Device LED code */
#define DD$fpcod        220	/* Drive Front Panel Code */
#define DD$tp_event_code    221	/* Event Code Field for TMSCP */
#define DD$tp_dsastat   222	/* TMSCP Status and Event code values */
#define DD$tp_unitid2   223	/* Unit model/class info */
#define DD$position     224	/* Tape Position at error */
#define DD$fmt_svr      225	/* Format Software rev */
#define DD$fmt_hvr      226	/* Format Hardware Rev */
#define DD$st1drvst     227	/* STI get xtnded drive status word 1 */
#define DD$gap_count    228	/* Tape Gap Count */
#define DD$st3drvst     229	/* nil */
#define DD$st4drvst     230	/* nil */
#define DD$st5drvst     231	/* nil */
#define DD$st6drvst     232	/* nil */
#define DD$st7drvst     233	/* nil */
#define DD$st8drvst     234	/* nil */
#define DD$st9drvst     235	/* nil */
#define DD$st10drvst    236	/* nil */
#define DD$st11drvst    237	/* nil */
#define DD$st12drvst    238	/* nil */
#define DD$st13drvst    239	/* nil */
#define DD$st14drvst    240	/* nil */
#define DD$st15drvst    241	/* nil */
#define DD$st16drvst    242	/* nil */
#define DD$stisumm      243	/* STI Summary Info from STI Get xtndd formatter status */
#define DD$stidrv0      244	/* Drive 0 Info */
#define DD$stidrv1      245	/* DRIVE 1 INFO */
#define DD$stidrv2      246	/* Drive 2 info */
#define DD$stidrv3      247	/* Drive 3 info */
#define DD$stifmterr1   248	/* nil */
#define DD$stifmterr2   249	/* nil */
#define DD$stifmterr3   250	/* STI GET EXTENDED FORMATTER STATUS */
#define DD$stifmterr4   251	/* nil */
#define DD$stifmterr5   252	/* nil */
#define DD$dsavar1      253	/* Variable Information for DSA devices */
#define DD$dsavar2      254	/* nil */
#define DD$dsavar3      255	/* nil */
#define DD$dsavar4      256	/* Y */
#define DD$dsavar5      257	/* nil */
#define DD$dsavar6      258	/* nil */
#define DD$dsavar7      259	/* nil */
#define DD$dsavar8      260	/* nil */
#define DD$dsavar9      261	/* nil */
#define DD$dsavar10     262	/* nil */
#define DD$dsavar11     263	/* nil */
#define DD$dsavar12     264	/* nil */
#define DD$dsavar13     265	/* nil */
#define DD$dsavar14     266	/* nil */
#define DD$dsavar15     267	/* nil */
#define DD$dsavar16     268	/* nil */
#define DD$dsavar17     269	/* nil */
#define DD$dsavar18     270	/* nil */
#define DD$dsavar19     271	/* nil */
#define DD$dsavar20     272	/* nil */
#define DD$orig_err     273	/* Original Error Flags from dsa cnt/xfer error */
#define DD$err_rec_flags    274	/* Error Recovery Flags */
#define DD$lvl_a_retry  275	/* Level A retry */
#define DD$lvl_b_retry  276	/* Level B retry */
#define DD$buf_data_mem_addr    277	/* Buffer data memory address */
#define DD$cont_addl_info   278	/* I don't know.  The spec is not clear! */
#define DD$m82summ      279	/* 8200 SUMMARY REG */
#define DD$m8cmera      280	/* MS780-C CSRA */
#define DD$mc8merb      281	/* MS780-C CSRB */
#define DD$m8cmerc      282	/* MS780-C CSRC */
#define DD$m5mer0       283	/* MS750 CSR0 */
#define DD$m5mer1       284	/* MS750 CSR1 */
#define DD$m5mer2       285	/* MS750 CSR2 */
#define DD$m88csr0      286	/* 8800 CSR0 */
#define DD$m88csr1      287	/* 8800 CSR1 */
#define DD$m88csr2      288	/* 8800 CSR2 */
#define DD$m88csr3      289	/* 8800 CSR3 */
#define DD$m82csr0      290	/* 8200 CSR0 */
#define DD$m82csr1      291	/* 8200 CSR1 */
#define DD$blacsr       292	/* BLA CSR REGISTER */
#define DD$cierrcod     293	/* ERROR CODE GENERATED BY CI PORT */
#define DD$cipcnf       294	/* CI PORT CONFIG REG */
#define DD$cipmcsr      295	/* CI PORT MAINTENANCE CSR */
#define DD$cipsr        296	/* CI PORT STATUS REG */
#define DD$cippr        297	/* CI PORT PARAMETER REG */
#define DD$bicsr1       298	/* VAXBI Control and Status Reg */
#define DD$nbiacsr0     299	/* NMI BI ADAPTER CSR0 */
#define DD$nbia1csr0    300	/* NMI BI1 ADAPTER CSR0 */
#define DD$nbiacsr1     301	/* NMI BI ADAPTER CSR1 */
#define DD$bi1buserreg  302	/* BI BUS ERROR REG FOR BI BUS 1 */
#define DD$ciaddr       303	/* Bad microcode address */
#define DD$cibvalue     304	/* Bad microcode value */
#define DD$cigvalue     305	/* Good microcode value */
#define DD$cilsaddr     306	/* Local Station Address */
#define DD$cilsysid     307	/* Local station ID */
#define DD$cilname      308	/* Local System node name */
#define DD$cirsaddr     309	/* Remote station address */
#define DD$cirsysid     310	/* Remote station id */
#define DD$cirname      311	/* Remote sys node name */
#define DD$ciport       312	/* Destination port */
#define DD$cistatus     313	/* Status of cmd? */
#define DD$ciopcode     314	/* Command Opcode */
#define DD$ciflags      315	/* Port command flags */
#define DD$cilocal      316	/* Local CI PPD version */
#define DD$ciremote     317	/* Remote CI PPD version */
#define DD$ciksysid     318	/* Known system id on db collision */
#define DD$cikname      319	/* DB collision known system node name */
#define DD$biaddr       320	/* BI transaction address for BVP error when bi error */
#define DD$bvpdata      321	/* BVP port data reg */
#define DD$ciper        322	/* CI Port Error Register */
#define DD$bvpsts       323	/* BVP Port status reg */
#define DD$bvperr       324	/* Port Error Registrer */
#define DD$cibcipcnf    325	/* BICA COnfiguration reg from CIBCI */
#define DD$cibcapmcsr   326	/* CIBCA Port Maint CSR */
#define DD$cibcapsr     327	/* CIBCA Port Status Register */
#define DD$busnum       329	/* Bus number associated with a UQ Controller Error */
#define DD$sareg        330	/* SA Register associated with a UQ port error */
#define DD$cierrs       331	/* Number of errors associated with the CI */
#define DD$cireinits    332	/* Number of reinits for CI port */
#define DD$cipfaddr     333	/* Port Failing Address Reg */
#define DD$cibcappr     334	/* Port Parameter Reg for CIBCA */
#define DD$bvpcntl      335	/* BVP Port Controller Reg */
#define DD$pnckrnstk    337	/* Panic Kernel Stack */
#define DD$pncintstk    338	/* Interrupt stack from panic */
#define DD$nmifltsilo   339	/* NMI fault silo registers */
#define DD$sbiawsilo    340	/* SBI/Asynchr Write silo regs */
#define DD$sbiawcsr     341	/* SBI/Asynchr Write csr regs */
#define DD$mvaxmser     342	/* UVAX 2 MSER */
#define DD$mvaxcaer     343	/* UVAX 2 caer */
#define DD$mvaxdaer     344	/* UVAX 2 DAER */
#define DD$sxerr_csr    345	/* LYNX/SXERR/ACP Status Register */
#define DD$vxstrmser    346	/* Memory System Error Register for VAXstar */
#define DD$uda5sa       347	/* uda50/50a stat addr reg */
#define DD$kdb5sa       348	/* KDB50 STATUS ADDRESS REG */
#define DD$rqdx3sa      349	/* RQDX3 STATUS ADDRESS REG */
#define DD$mcuv1summ    350	/* uVAXI MCK summary code reg */
#define DD$mcuv2summ    351	/* uVAXII MCK summary code reg */
#define DD$mc73summ     352	/* 730 MCk summary code reg */
#define DD$sdirtpi      353	/* Real Time Port Image byte from RA82 */
#define DD$sdidrvst     354	/* RA70 Drive State Byte */
#define DD$sxerr_diagreg    355	/* ACP/LYNX/SHADOWFAX Diagnostic register */
#define DD$sxerrsubtst  356	/* ACP/LYNX/SHADOWFAX Failing Subtest number */
#define DD$sxerrinfo    357	/* LYNX/ACP/SHADOWFAX Error Info */
#define DD$tk57sa       358	/* SA Register for TK50/70 */
#define DD$rc25sa       359	/* RC25 Status address Register */
#define DD$ctlrvar1     360	/* 1st word of controller dep info in mscp ctlr err */
#define DD$ciprotaddl   361	/* Additional Info for Logged Packet Protocol Error */
#define DD$ciaddlprot   362	/* Additional Short for CI Protocol Error */
#define DD$cicolladdl   363	/* Additional Info for CI Collision packet */
#define DD$cilpktlpaddl     364	/* CI Logged Packet Logged Packet Addl info */

/* Standard coded field definitions */
/* Coded values for ostype */
#define es$vms          1	/* VMS */
#define es$ultrix32     2	/* ULTRIX 32 */
#define es$tops_10      3	/* TOPS-10 */
#define es$tops_20      4	/* TOPS-20 */
/* Coded values for eventclass */
#define ec$error        1	/* Error Event */
#define ec$operator     2	/* Operational Event */
#define ec$maintenance  3	/* Maintenance Event */
#define ec$statistical  4	/* Statistical Event */
#define ec$corrupt      5	/* CORRUPTED EVENT */
/* Coded values for devclass */
#define dc$cpu          1	/* CPU */
#define dc$memory       2	/* Memory */
#define dc$dsdisk       3	/* DSA Disk */
#define dc$mbdisk       4	/* Massbus Disk */
#define dc$dstape       5	/* DSA Tape */
#define dc$mbtape       6	/* Massbus Tape */
#define dc$bus          7	/* BUS */
#define dc$adapter      8	/* Adapter/Controller */
#define dc$comm         9	/* Comm Device */
#define dc$card         10	/* Card Reader */
#define dc$terminal     11	/* Terminal */
#define dc$realtime     12	/* Realtime */
#define dc$mailbox      13	/* Mailbox/Socket */
#define dc$journal      14	/* Journal */
#define dc$misc         15	/* Unknown */
#define dc$floppy       16	/* FLOPPY DISK */
#define dc$ubdisk       17	/* UNIBUS DISK */
#define dc$ubtape       18	/* UNIBUS TAPE */
#define dc$rbdisk       19	/* RB CLASS DISK */
#define dc$tktape       20	/* TK CLASS TAPE */
/* Coded values for devtype */
#define dt$8650         1	/* 8650 */
#define dt$8600         2	/* 8600 */
#define dt$8800         3	/* 8800 */
#define dt$8200         4	/* 8200 */
#define dt$785          5	/* 785 */
#define dt$780          6	/* 780 */
#define dt$750          7	/* 750 */
#define dt$uv1          8	/* Microvax I */
#define dt$uv2          9	/* Microvax II */
#define dt$aie          10	/* AIE Controller */
#define dt$aio          11	/*  AIO Controller */
#define dt$d78          12	/* DW780 Adapter */
#define dt$d50          13	/* DW750 Adapter */
#define dt$bia          14	/* BIA Adapter */
#define dt$bcci         15	/* CIBCI */
#define dt$78ci         16	/* CI780 */
#define dt$75ci         17	/* CI750 */
#define dt$r60          18	/* RA60 */
#define dt$r80          19	/* RA80 */
#define dt$r81          20	/* RA81 */
#define dt$r82          21	/* RA82 */
#define dt$rz1          22	/* RZ01 */
#define dt$rzf01        23	/* RZF01 */
#define dt$rb1          24	/* UNDEFINED */
#define dt$r31          25	/* RD31 */
#define dt$r51          26	/* RD51 */
#define dt$r52          27	/* RD52 */
#define dt$r53          28	/* RD53 */
#define dt$r54          29	/* RD54 */
#define dt$rx5          30	/* RX50 */
#define dt$rx3          31	/* RX33 */
#define dt$ta78         32	/* TA78 */
#define dt$ta81         33	/* TA81 */
#define dt$tk50         34	/* TK50 */
#define dt$tu81         35	/* TU81 */
#define dt$rk6          36	/* RK06 */
#define dt$rk7          37	/* RK07 */
#define dt$rp4          38	/* RP04 */
#define dt$rp5          39	/* RP05 */
#define dt$rp6          40	/* RP06 */
#define dt$rp7          41	/* RP07 */
#define dt$r7ht         42	/* RP07HT */
#define dt$rl1          43	/* RL01 */
#define dt$rl2          44	/* RL02 */
#define dt$rx1          45	/* RX01 */
#define dt$rx2          46	/* RX02 */
#define dt$rx4          47	/* RX04 */
#define dt$rm8          48	/* RM80 */
#define dt$rm5          49	/* RM05 */
#define dt$tu58         50	/* TU58 */
#define dt$ml11         51	/* ML11 */
#define dt$rb2          52	/* RB02 */
#define dt$rb8          53	/* RB80 */
#define dt$dz11         54	/* DZ11 */
#define dt$dz32         55	/* DZ32 */
#define dt$dz730        56	/* DZ730 */
#define dt$dmc11        57	/* DMC11 */
#define dt$dmr11        58	/* DMR11 */
#define dt$u50          59	/* UDA50 */
#define dt$u5a          60	/* UDA50A */
#define dt$t8p          61	/* TU81P */
#define dt$rc25         62	/* RC25 */
#define dt$xk_3271      63	/* XK 3271 */
#define dt$xu_2780      64	/* XU 2780 */
#define dt$nw_x25       65	/* NW X25 */
#define dt$nv_x29       66	/* NV X29 */
#define dt$sb_isb11     67	/* SB ISB11 */
#define dt$mx200        68	/* MUX200 */
#define dt$dmp11        69	/* DMP11 */
#define dt$dmf32        70	/* DMF32 */
#define dt$xv_3271      71	/* XV 3271 */
#define dt$ci           72	/* CI */
#define dt$ni           73	/* NI Bus */
#define dt$una11        74	/* UNA11 */
#define dt$te16         75	/* TE16 */
#define dt$tu45         76	/* TU45 */
#define dt$t77          77	/* TU77 */
#define dt$t78          78	/* TU78 */
#define dt$ts11         79	/* TS11 */
#define dt$t80          80	/* TU80 */
#define dt$lax          81	/* LAX */
#define dt$yn_x25       82	/* YN X25 */
#define dt$y0x25        83	/* Y0 X25 */
#define dt$yp_adccp     84	/* YP ADCCP */
#define dt$y03271       85	/* Y0 3271 */
#define dt$yr_ddcmp     86	/* DDCMP */
#define dt$yssdlc       87	/* YS SDLC */
#define dt$dr8          88	/* DR780 */
#define dt$dr5          89	/* DR750 */
#define dt$d1w          90	/* DR11W */
#define dt$p1r          91	/* PC 11R */
#define dt$p1t          92	/* PC 11T */
#define dt$d1c          93	/* DR11C */
#define dt$x1c          94	/* XI DR11C */
#define dt$xpb          95	/* XP PCL11B */
#define dt$uqprt        96	/* UQ PORT */
#define dt$rdx          97	/* RDRX */
#define dt$unknjnl      98	/* UNKNJNL */
#define dt$rujnl        99	/* RUJNL */
#define dt$bijnl        100	/* BIJNL */
#define dt$atjnl        101	/* ATJNL */
#define dt$aijnl        102	/* AIJNL */
#define dt$cljnl        103	/* CLJNL */
#define dt$cibca        104	/* CIBCA */
#define dt$uba          105	/* UBA */
#define dt$bua          106	/* BUA */
#define dt$nmi          107	/* NMI/BI ADAPTER */
#define dt$78sb         108	/* 780 SBI */
#define dt$86sb         109	/* 8600 SBI */
#define dt$bib          110	/* BI */
#define dt$nmb          111	/* NMI BUS */
#define dt$rcf25        112	/* RCF25 */
#define dt$rrd50        113	/* RRD50 */
#define dt$rv8          114	/* RV80 */
#define dt$rx18         115	/* RX18 */
#define dt$ra70         116	/* RA70 */
#define dt$ra90         117	/* RA90 */
#define dt$c78          118	/* MS780C */
#define dt$78e          119	/* MS780E */
#define dt$m75          120	/* MS750 */
#define dt$m86          121	/* MS8600 */
#define dt$m88          122	/* MS8800 */
#define dt$m82          123	/* MS8200 */
#define dt$muv2         124	/* MS630 */
#define dt$bla          125	/* BLA CONTROLLER */
#define dt$rc25ctl      126	/* RC25 CONTROLLER */
#define dt$rux5ctl      127	/* RUX50 CONTROLLER */
#define dt$tk5ctl       128	/* TK50 CONTROLLER */
#define dt$tu81ctl      129	/* TU81 CONTROLLER */
#define dt$rqdxctl      130	/* RQDX CONTROLLER */
#define dt$kda5ctl      131	/* KDA50 CONTROLLER */
#define dt$tk7ctl       132	/* TK70 CONTROLLER */
#define dt$rv8ctl       133	/* RV80 CONTROLLER */
#define dt$rrd5ctl      134	/* RRD50 CONTROLLER */
#define dt$kdb5ctl      135	/* KDB50 CONTROLLER */
#define dt$r3qdxctl     136	/* RQDX3 CONTROLLER */
#define dt$hsc50        137	/* HSC50 */
#define dt$vmsctl       138	/* VMS MSCP CONTROLLER */
#define dt$topsctl      139	/* TOPS-10/20 MSCP CTRLR */
#define dt$kfbtactl     140	/* KFBTA CONTROLLER */
#define dt$hsc70        141	/* HSC70 */
#define dt$hsb50        142	/* HSB50 */
#define dt$ultctl       143	/* ULTRIX MSCP CTRLR */
#define dt$vxstr        144	/* MS400 */
#define dt$m73          145	/* MS730 */
#define dt$m83          146	/* MS8300 */
#define dt$m850         147	/* MS8500 */
#define dt$m855         148	/* MS8550 */
#define dt$m87          149	/* MS8700 */
#define dt$730          150	/* 730 */
#define dt$8300         151	/* 8300 */
#define dt$8500         152	/* 8500 */
#define dt$8550         153	/* 8550 */
#define dt$8700         154	/* 8700 */
#define dt$acp          155	/* ACP CONTROLLER */
#define dt$shdwfx       156	/* SHADOWFAX GRAPHICS */
/* Coded values for coarsesyndrome */
#define mck86           1	/* 8600 MACHINE CHECK */
#define mck78           2	/* 780 Machine Check */
#define mck75           3	/* 750 Machine Check */
#define mckuv1          4	/* Microvax I Machine Check */
#define mckuv2          5	/* Microvax II Machine Check */
#define mck88           6	/* 8800 Machine Check */
#define mck82           7	/* 8200 Machine Check */
#define bier            8	/* BI Bus Error */
#define nmibus          9	/* NMI Bus Error */
#define ubaadp          10	/* UBA Adapter Error */
#define buaadp          11	/* BUA Adapter Error */
#define nmiadp          12	/* NMI Adapter Error */
#define scbint          13	/* SCB Interrupt */
#define uniint          14	/* Unibus Interrupt */
#define cte86           15	/* 8600 CONSOLE TIMEOUT */
#define cte88           16	/* 8800 Console Timeout */
#define kerstk          17	/* Kernel Stack Dump */
#define intstk          18	/* Interrupt Stack Dump */
#define usrstk          19	/* User Mode Stack Dump */
#define raf             20	/* Reserved Address Fault */
#define pif             21	/* Priveleged Instruction Fault */
#define rof             22	/* Reserved Operand Fault */
#define bpt             23	/* Breakpoint Instruction Fault */
#define xfc             24	/* XFC Instruction Fault */
#define syscall         25	/* System Call Exception/Fault */
#define atflt           26	/* Arithmetic Trap Exception/Fault */
#define astflt          27	/* AST Exception/Fault */
#define segflt          28	/* Segmentation Fault */
#define protect         29	/* Protection Fault */
#define trace           30	/* Trace Exception/Fault */
#define pgflt           31	/* Page Fault */
#define pgtflt          32	/* Page Table Fault */
#define mem_crd         33	/* Memory CRD Error */
#define mem_rds         34	/* Memory RDS Error */
#define mem_ctl         35	/* Memory Controller Error */
#define mem_wmask       36	/* Memory Write Mask Error */
#define sbi_err         37	/* SBI ERROR */
#define sbi_wtim        38	/* SBI WTIME ERROR */
#define sbi_alrt        39	/* SBI ALERT */
#define sbi_flt         40	/* SBI FAULT */
#define sbi_fail        41	/* SBI FAILURE */
#define cmpflt          42	/* COMPAT MODE FAULT */
#define cnterr          43	/* CONTROLLER ERROR */
#define hmeacc          44	/* MEMORY ACCESS ERROR */
#define dsktrerr        45	/* DISK TRANSFER ERROR */
#define sdierr          46	/* SDI ERROR */
#define smdskerr        47	/* SMALL DISK ERROR */
#define bdblkrepl       48	/* BAD BLK REPLC ATTMPT */
#define tptrerr         49	/* TAPE TRANSFER ERROR */
#define sticomm         50	/* STI COMMUNIC/CMD FAILURE */
#define stidrverr       51	/* STI DRIVE ERROR */
#define stifmterr       52	/* STI FORMATTER ERR */
#define uqattn          53	/* UQ PORT ATTENTION */
#define blaerr          54	/* BLA ERROR */
#define bvperr          55	/* BVP ERROR */
#define ciattn          56	/* CI ATTENTION MSG */
#define cilpkt          57	/* CI LOGGED PACKET */
#define mem_par         58	/* MEMORY PARITY ERROR */
#define mem_nxm         59	/* NON-EXISTANT MEMORY */
#define mck83           60	/* 8300 MACHINE CHECK */
#define mck850          61	/* 8500 MACHINE CHECK */
#define mck855          62	/* 8550 MACHINE_CHECK */
#define mck87           63	/* 8700 MACHINE CHECK */
#define mck73           64	/* 730 MACHINE CHECK */
/* Coded values for errtyp */
#define memcrd          1	/* CRD */
#define memrds          2	/* RDS */
#define memctl          3	/* Controller */
#define memwmsk         4	/* WMASK */

/* Standard segment type:  codes */
#ifndef ES$EIS
#define ES$EIS          1	/* Event Identification Segment */
#define ES$DIS          2	/* Device Information Segment */
#define ES$SDS          3	/* Supporting Data Segment */
#define ES$CDS          4	/* Correlating Data Segment */
#define ES$ADS          5	/* Additional Data Segment */
#define ES$SIS          6	/* Summary Information Segment */
#define ES$CIS          7	/* Configuration Information Segment */
#endif  ES$EIS

/* STD-SEGMENT id codes */
#define DD$EIS          1	/* NIL */
#define DD$DIS          1	/* Device Information Segment of standard record */
#define DD$INFO_MSG_CDS     1	/* NIL */
#define DD$MC8600_CDS   4	/* 8600 machine check cds */
#define DD$MC780CDS     9	/* 780 Machine check cds */
#define DD$MC750_CDS    2	/* 750 machine check cds */
#define DD$MCUVAX1_CDS  7	/* uVAX1 Machine Check cds */
#define DD$MCUVAX2_CDS  8	/* uVAX2 Machine Check cds */
#define DD$MC8800_CDS   6	/* 8800 Machine CHeck cds */
#define DD$MC8200_CDS   5	/* 8200 Machine Check CDS */
#define DD$SBI780_CDS   10	/* 780 SBI Error CDS */
#define DD$ASYNCH_WRT_CDS   11	/* Asynchronous Write Error CDS */
#define DD$SBIA8600_CDS     12	/* 8600 SBIA Error CDS */
#define DD$UBA780_CDS   13	/* 780 UBA Error CDS */
#define DD$PANIC_CDS    14	/* Panic cds */
#define DD$MEMORY_CDS   15	/* Memory Error CDS */
#define DD$MC86_ADS     1	/* 8600 mck ADS */
#define DD$MC78_ADS     2	/* 780 MCK ADS */
#define DD$MC75_ADS     3	/* 750 mck ADS */
#define DD$MCUVI_ADS    4	/* uVI mck ads */
#define DD$MCUVII_ADS   5	/* uVII mck ads */
#define DD$MC88_ADS     6	/* 8800 mck ads */
#define DD$MC82_ADS     7	/* 8200 mck ads */
#define DD$SBI78_ADS    8	/* 780 sbi ads */
#define DD$ASYNCWR_ADS  9	/* 780 Async write ads */
#define DD$SBI86_ADS    10	/* 8600 SBI ads */
#define DD$UBA78_ADS    11	/* 780 UBA ads */
#define DD$STRAY_ADS    12	/* stray interrupt ads */
#define DD$EXPTFLT_ADS  13	/* Except/flt ads */
#define DD$MEM_ADS      15	/* Memory Error ads */
#define DD$PANIC_ADS    14	/* panic system registers (1st ADS) */
#define DD$BUA_ERR_CDS  16	/* BUA CDS */
#define DD$BUA_ERR_SDS  1	/* BUA SDS */
#define DD$BUA_ERR_ADS  16	/* BUA ADS */
#define DD$BI_BUS_ERR_CDS   17	/* BI BUS Error Kludge!! */
#define DD$BI_BUS_ERR_ADS   17	/* ANOTHER BI BUS KLUDGE!! */
#define DD$DSK_XFR_CDS  18	/* DSA Disk transfer error cds */
#define DD$DSK_MEM_CDS  19	/* DSA DISK MEMORY ERROR CDS */
#define DD$TAP_MEM_CDS  20	/* DSA Tape memory error cds */
#define DD$DSK_CTL_CDS  21	/* DSA Disk controller Error icds */
#define DD$TAP_CTL_CDS  22	/* DSA Tape Controller error cds */
#define DD$RA60_SDI_CDS     23	/* RA60 SDI CDS */
#define DD$RA8_SDI_CDS  24	/* RA8 Disk Devices SDI CDS */
#define DD$SMALL_DISK_CDS   25	/* DSA Small Disk Error CDS */
#define DD$BAD_BLK_CDS  26	/* Bad Block Replace cds */
#define DD$TAP_XFER_CDS     27	/* DSA Tape Xfer err cds */
#define DD$STI_COM_CDS  28	/* STI Communic/Cmd Failure cds */
#define DD$STI_DRV_CDS  29	/* STI Driver Error CDS */
#define DD$STI_FMT_CDS  30	/* STI Get Formatter Error cds */
#define DD$DSK_MEM_SDS  2	/* DSA Disk mem err sds */
#define DD$TAP_MEM_SDS  3	/* DSA Tape mem err sds */
#define DD$DSK_CTL_SDS  4	/* Disk Controller Error SDS */
#define DD$TAP_CTL_SDS  5	/* DSA Tape controller sds */
#define DD$RA60_SDI_SDS     6	/* RA60 SDI sds */
#define DD$RA8_SDI_SDS  7	/* RA8 disk devices sds */
#define DD$SMALL_DSK_SDS    8	/* Small DSA Disk error sds */
#define DD$DSK_XFER_SDS     9	/* DSA Disk Xfer Error sds */
#define DD$BAD_BLK_SDS  10	/* DSA Bad Block Repl SDS */
#define DD$TAP_XFER_SDS     11	/* DSA Tape Xfer Err sds */
#define DD$STI_COMM_SDS     12	/* STI Communic/Cmd err sds */
#define DD$STI_DRV_SDS  13	/* STI drive error sds */
#define DD$STI_FMT_SDS  14	/* STI Get Formatter Error SDS */
#define DD$DSA_GENERIC_ADS  18	/* Common DSA error info acros devices (ads) */
#define DD$GENERIC_DISK_ADS 19	/* Disk Unit ID */
#define DD$GENERIC_TAPE_ADS 20	/* Tape Unit ID */
#define DD$DSK_MEM_ADS  21	/* DSA Disk Memory Error ADS */
#define DD$TAP_MEM_ADS  22	/* DSA Tape memory error ads */
#define DD$DSK_CTL_ADS  23	/* DSA Disk Controller Error ads */
#define DD$TAP_CTL_ADS  24	/* DSA Tape Controller Error ADS */
#define DD$SDI_GENERIC_ADS  25	/* Common SDI Stuff for ads */
#define DD$SMALL_DSK_ADS    26	/* DSA Small Disk Error ADS */
#define DD$DSK_XFER_ADS     27	/* DSA Disk xfer ads */
#define DD$BAD_BLK_ADS  28	/* Bad Blk Replacement ads */
#define DD$TAP_XFER_ADS     29	/* DSA Tape xfer error ads */
#define DD$STI_COMM_ADS     30	/* STI Communic/Cmd Error ads */
#define DD$STI_DRV_ADS  31	/* STI Driver Error Ads */
#define DD$STI_FMT_ADS  32	/* STI Format error ads */
#define DD$MEMC78_CDS   31	/* 780-C MEM ERROR CDS */
#define DD$MEME78_CDS   32	/* 780-E MEM ERROR CDS */
#define DD$MEM750_CDS   33	/* 750 MEMORY ERROR CDS */
#define DD$MEM860_CDS   34	/* 8600 MEMORY ERROR CDS */
#define DD$MEM880_CDS   35	/* 8800 MEM ERROR CDS */
#define DD$MEM820_CDS   36	/* Y */
#define DD$PANIC_KERNEL1_ADS    33	/* first kernel stack ads */
#define DD$PANIC_INTSTK1_ADS    37	/* First interrupt stack ads */
#define DD$NMIFLT_SDS   14	/* NMI Fault SDS */
#define DD$NMIFLT_CDS   37	/* NMI Fault CDS */
#define DD$NMIFLT_ADS1  41	/* NMI fault ADS #1 */
#define DD$NMIADP_CDS   38	/* NMI Adapter Error CDS */
#define DD$NMIADP_SDS   16	/* NMI Adapter Error SDS */
#define DD$BVP_BIER_CDS     39	/* BVP BI Bus error CDS */
#define DD$BVP_GEN_CDS  40	/* BVp Regular error cds */
#define DD$BVP_SDS      17	/* BVP CDS */
#define DD$SYS_STARTUP_CDS  41	/* System Startup Message */
#define DD$BLA_ERR_CDS  42	/* BLA Error CDS */
#define DD$BLA_ERR_SDS  18	/* BLA Error SDS */
#define DD$BLA_ERR_ADS  49	/* BLA Error ADS */
#define DD$CI7_DATTN_CDS    43	/* CI780/750 DATTN CDS */
#define DD$CIBCI_DATTN_CDS  44	/* CIBCI DATA ATTN CDS */
#define DD$CIBCA_DATTN_CDS  45	/* CIBCA DATA ATTN CDS */
#define DD$CI7_DATTN_SDS    19	/* CI780/750 DATA ATTN SDS */
#define DD$CIBCI_DATTN_SDS  20	/* CIBCI DATA ATTN SDS */
#define DD$CIBCA_DATTN_SDS  21	/* CIBCA DATA ATTN SDS */
#define DD$CI7_DATTN_ADS    50	/* CI780/750 DATA ATTN ADS */
#define DD$CIBI_DATTN_ADS   51	/* CIBCI/BCA DATA ATTN ADS */
#define DD$CI_LPKT_CDS  46	/* CI LOGGED PACKET CDS */
#define DD$CI_LPKT_PKT_ADS  52	/* CI LOGGED PACKET PACKET ADS */
#define DD$CI_LPKT_PROT_ADS 54	/* CI LOGGED PACKET PROTOCOL ADS */
#define DD$CI_LPKT_COLLIS_ADS   55	/* CI LOGGED PACKET COLLISION ADS */
#define DD$CI_GEN_CDS   47	/* CI Generic info cds */
#define DD$CIBI_COMMON_SDS  22	/* CI BI COMMON SDS */
#define DD$CI_LPKT_SDS  23	/* Logged packet SDS */
#define DD$MEMUVAX2_CDS     48	/* UVAX2 Memory Error cds */
#define DD$UQ_PORT_CDS  49	/* UQSSP Port Error CDS */
#define DD$UDA5X_ATTN_CDS   50	/* UDA5X Status Address info (CDS) */
#define DD$KDB50_ATTN_CDS   51	/* kdb50 status addr register */
#define DD$MC730_CDS    52	/* 730 MCK Summar Code */
#define DD$MC73_ADS     56	/* 730 MCK ads */
#define DD$RA82_SDI_CDS     53	/* RA82 SDI CDS */
#define DD$RA70_SDI_CDS     54	/* RA70 SDI CDS */
#define DD$RA90_SDI_CDS     55	/* RA90 SDI CDS */
#define DD$LYNX_ACP_CDS     56	/* LYNX/ACP/SXERR CDS */
#define DD$LYNX_ACP_SDS     24	/* LYNX/ACP/SXERR Diagnostic reg */
#define DD$LYNX_ACP_ADS     57	/* LYNX/ACP/SXERR ADS */
#define DD$RC25_ATTN_CDS    57	/* RC25 Device Attn Error CDS */
#define DD$TK57_ATTN_CDS    58	/* TK50/70 Attention CDS */
#define DD$DSK_CTL_ADS1     58	/* Additional info for dsa controller error */
#define DD$DSK_MEM_ADS1     59	/* controller specific info for host mem error */
#define DD$DSA_CTL_ADS1     60	/* More ctrlr dep info */
#define DD$DSA_CTL_ADS2     61	/* still more ctrlr dep info */
#define DD$DSA_CTL_ADS3     62	/* even more ctrlr dep info!! */
#define DD$DSA_CTL_ADS4     63	/* finally? the end of ctrlr dep info */

/* STD-RECORD id codes */

/* STRUCTURE DEFINITIONS FOR THE STANDARD DSD TABLES */


/* Structure definition for the standard segment header */
typedef struct {
  short type;
  short subtype;
  short version;
  short length;
  DD$BYTE VALID_byte[DD$MAX_SEGMENT_ELEMENTS * DD$VALID_CODE_SIZE / 8];
}
 DD$STD_HEADER, *DD$STD_HEADER_PTR;


/* Structure definition for a standard data-item code */
typedef struct {
  short		CODE;
  char	        *NAME;
  char		*LABEL;
}
 DD$STD_CODE, *DD$STD_CODE_PTR;


/* Structure definition for a register field code */
typedef struct {
  long		CODE;
  char		*LABEL;
}
 DD$FIELD_CODE, *DD$FIELD_CODE_PTR;


/* Structure definition for a register field DSD */
typedef struct {
  DD$BYTE		SIZE;
  DD$BYTE		CLASS;
  DD$BYTE		DISPLAY;
  short			CODE_COUNT; 
  DD$FIELD_CODE_PTR	MAP;
  char			*LABEL;
}
 DD$REGISTER_FIELD_DSD, *DD$REGISTER_FIELD_DSD_PTR;


/* Structure definition for the standard data-item DSD table */
typedef struct {
  char		        *NAME;
  short			ID;
  DD$BYTE		TYPE;
  DD$BYTE		DISPLAY;
  char			*LABEL;
  short			COUNT;	/* Coded item count or VECTOR length */
  DD$STD_CODE_PTR		ITEM;
  DD$REGISTER_FIELD_DSD_PTR	FIELD;
}
 DD$STD_ITEM_DSD, *DD$STD_ITEM_DSD_PTR;

/* STRUCTURE DEFINITIONS FOR THE STANDARD DSD TABLES   cont. */

/* Structure definition for the standard data-segment DSD table */
typedef struct {
  short		TYPE;
  short		SUBTYPE;
  char		*LABEL;
  short		ELEMENT_COUNT;
  short		*ELEMENT;
  char		STRING_AREA;	/* Offset to string area in segment */
			        /* Calculate at run time */
}
 DD$STD_SEGMENT_DSD, *DD$STD_SEGMENT_DSD_PTR;


/* Standard Data Structure Definition Context Structure */
typedef struct {
  /* Table access function information */
  int			 CTX_type;	   /* Not for use by application */
  int			 current_element;  /* Not for use by application */
  int			 current_field;    /* Not for use by application */

  /* Data-segment information */
  DD$STD_HEADER_PTR	 segment_ptr;	   /* Pointer to current data-segment */
  DD$STD_SEGMENT_DSD_PTR segment_DSD_ptr;  /* Pointer to current segment DSD */
  int			 segment_VALID_code;

  /* Data-item information */
  DD$BYTE		 *item_ptr;	   /* Pointer to current data-item */
  DD$STD_ITEM_DSD_PTR	 item_DSD_ptr;	   /* Pointer to current item DSD */
  int			 item_VALID_code;

  /* Register field information */
  DD$BYTE		 field_position;   /* Bits to right of field */
  DD$REGISTER_FIELD_DSD	 *field_DSD_ptr;   /* Pointer to current field DSD */

  /* Application specific information */
  long			 user_1;	   /* Reserved for use by application */
  long			 user_2;	   /* Reserved for use by application */
  long			 user_3;	   /* Reserved for use by application */
}
 DD$STD_DSD_CTX, *DD$STD_DSD_CTX_PTR;


/* End of std_dsd.h */
