.TH ctags 1
.SH NAME
ctags \- create a tags file
.SH SYNTAX
.B ctags
[ 
.B \-BFatuwvx
]
name ...
.SH DESCRIPTION
The
.B ctags
command
makes a tags file for ex(1)
from the specified C, Pascal and Fortran sources.
A tags file gives the locations of specified objects (in this case
functions and typedefs) in a group of files.  Each line of the tags
file contains the object name, the file in which it is defined, and
an address specification for the object definition. Functions are
searched with a pattern, typedefs with a line number. Specifiers are
given in separate fields on the line, separated by blanks or tabs.
Using the
.I tags
file,
.B ex
can quickly find these objects definitions.
.PP
If the
.B \-x
flag is given, 
.B ctags
produces a list of object names, the line number and file
name on which each is defined, as well as the text of that line
and prints this on the standard output.  This is a simple index
which can be printed out as an off-line readable function index.
.PP
If the
.B \-v
flag is given,
an index is produced on the standard output.
This listing contains the function name,
file name, and page number
(assuming 64 line pages).
Since the output will be sorted into lexicographic order,
it may be desired to run the output through
.BR "sort \-f" .
For example,
.EX
	ctags \-v files | sort \-f > index
.EE
Files whose name ends in 
.B \.c
or
.B \.h
are assumed to be C source files and are searched for C routine and
macro definitions.
Others are first examined to see if they contain any Pascal or
Fortran routine definitions; if not, they are processed again
looking for C definitions.
.PP
Other options are:
.TP 5
.B \-F
use forward searching patterns (/.../) (default).
.TP 5
.B \-B
use backward searching patterns (?...?).
.TP 5
.B \-a
append to tags file.
.TP 5
.B \-t
create tags for typedefs.
.TP 5
.B \-w
suppressing warning diagnostics.
.TP 5
.B \-u
causing the specified files to be
.I updated
in tags, that is, all references to them are deleted,
and the new values are appended to the file.
Note that this option is implemented in a way which is rather slow.
It is usually faster to simply rebuild the
.I tags
file.)
.PP
The tag
.I main
is treated specially in C programs.
The tag formed is created by prepending
.I M
to the name of the file, with a trailing .c removed, if
any, and leading pathname components also removed.
This makes use of
.B ctags
practical in directories with more than one program.
.SH RESTRICTIONS
Recognition of \fBfunctions\fR, \fBsubroutines\fR and \fBprocedures\fR
for FORTRAN and Pascal make no
attempt to deal with block structure; if you have two
Pascal procedures in different blocks with the same name you lose.
.PP
Does not know about #ifdefs.
.PP
Does not know about Pascal types.
Relies on the input being well formed to detect typedefs.
Use of -tx shows only the last line of typedefs.
.SH FILES
.DT
tags		output tags file
.SH SEE ALSO
ex(1), vi(1)
