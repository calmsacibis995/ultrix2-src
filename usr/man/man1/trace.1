.TH trace 1
.SH NAME
trace \- trace system calls of programs
.SH SYNTAX
.B trace
[ 
.I options
]
.I cmd args...
.SH DESCRIPTION
The
.PN trace
command with no flag arguments traces for the given
\fIcmd\fP and \fIargs\fP all system calls
made and prints a time stamp,
the PID, call and/or return values and arguments
and puts its output in the file trace.dump.
.SH OPTIONS
.TP 15
.B \-z
Echo arguments only.
.TP 15
\fB\-f\fR \fIfilename\fR
Put dump in file \fIfilename\fP.
.PP
Only one of the following option arguments can be specified at
one time.
.PP
.TP 15
.B \-c\fI#\fR
Trace the given PIDs and their children.  Up to sixteen PIDs can
be specified.
.TP 15
.B \-p\fI#\fR
Trace the given PIDs only.  Up to sixteen PIDs can be specified.
.TP 15
.B \-g\fI#\fR
Trace the given groups only.  Up to sixteen Group IDs can be
specified
.TP 15
.B \-u\fI#\fR
Trace the given UIDs only.  Up to sixteen PIDs can be specified.
.TP 15
.B \-s\fI#\fR
Trace the given system calls only.  Up to sixteen PIDs can be
specified.
.SH EXAMPLES
.EX
trace -f ls.dump ls -l /dev >ls.out
.EE
runs the cmd ls -l /dev and puts the trace in ls.dump
and 
.PN ls
output in ls.out.
.EX
trace -f csh.trace -p $$ &
.EE
will trace your login shell in the background. To stop the trace
just send it a termination signal (that is, kill -TERM trace_pid).
.SH RESTRICTIONS
Due to security, no one,
not even the super-user can trace anyone elses
programs. This sort of negates some of the usefulness of the
\fB-g\fP and \fB-u\fP flags.
.sp
The 
.PN setuid 
program cannot be traced.
.sp
Only 16 numbers
can be given to the \fB-c, -p, -g, -u,\fP and \fB-s\fP flags.
.SH FILES
.TP 15
/dev/trace
read only character special device for reading syscall data.
.TP 15
trace.dump
default file for the system call trace data.
.SH "SEE ALSO"
open(2), close(2), ioctl(2), select(2), read(2), trace(5)
