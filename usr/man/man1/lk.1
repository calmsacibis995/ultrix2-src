.TH lk 1 
.SH NAME
lk \- link editor
.SH SYNTAX
.B lk
[ option ] ... file ...
.SH DESCRIPTION
The
.PN lk
command combines several object programs into one, resolves external
references, and searches libraries.
In the simplest case, several object
.I files
are given, and
.PN lk
combines them, producing an object module which can be executed.
The output of
.PN lk
is always a standard ULTRIX a.out object module. 
This file is made executable only if no errors occurred during the load.
.PP
The argument routines are linked together in the order
specified.  The entry point of the output is the
beginning of the first routine, unless the \fB\-e\fP 
option is specified.
.PP
If the argument is a library, it is searched only once
at the point it is encountered in the argument list.
Only those routines defining an unresolved external
reference are loaded.
If a routine from a library references another routine in the library
and the library has not been processed by ranlib(1),
the referenced routine must
appear after the referencing routine in the library.
Thus the order of programs within libraries may be important.
The first member of a library should be a file named `\_\^\_.SYMDEF',
which is a dictionary for the library as produced by ranlib(1).
The dictionary is searched repeatedly
to satisfy as many references as possible.
.PP
The symbols `\_etext', `\_edata' and `\_end'
(`etext', `edata' and `end' in C)
are reserved, and if referred to,
are set to the first location above the program,
the first location above initialized data,
and the first location above all data in that order.
It is an error to define these symbols.
.PP
Like the 
.PN ld
linker, the 
.PN lk
linker can process ULTRIX
object modules, a.out
files, archived libraries (.a files), and
ranlib-generated indexed libraries. 
Unlike the 
.PN ld
linker, however, the 
.PN lk
linker can also
process object modules generated by the VAX FORTRAN compiler.
All 
.PN lk
command options can also be specified on the fort command.
.PP
The 
.PN lk
command has several options.
Except for
.BR \-l ,
they should appear before the file names.
.TP
.B \-D\ number
Set data segment length. `number' is a number specifying the
desired length of the data segment. The linker pads the data segment
to this length with zero bytes.
.TP
.BI \-e\ symbol
Take the argument as the
name of the entry point of the loaded
program; location 0 is the default.
.TP 
.BI \-l x
This option is an abbreviation for the library name
.RI `/lib/lib x .a',
where
.I x
is a string.
If that does not exist,
.PN lk
tries
.RI `/usr/lib/lib x .a'
A library is searched when its name is encountered,
so the placement of a
.B \-l
is significant.
.TP
.BI \-H\ number
Take the number argument as a decimal integer, add it to the end
of text, and cause the data section to start at a higher
address.
.TP
.B \-K
Produce a full load map, cross-referencing all defined symbols.
.TP
.B \-M
Produce a load map, consisting of a module and program section synopsis
and a symbol cross-reference.  Only symbols that are referenced appear
in the cross-reference.  Use -K to cross-reference all symbols.
.TP
.B \-N
Do not make the text portion read only or sharable.  
(Use magic number 0407.)
.TP 
.B  \-n
Arrange (by giving the output file a 0410 "magic number") that
when the output file is executed,
the text portion will be read-only and shared
among all users executing the file.
This involves moving the data areas up to the first
possible 1024 byte boundary following the
end of the text.
.TP 
.BI \-o\ name
Take the 
.I name
argument after
.B \-o
as the name of the
.PN lk
output file, instead of
.BR a.out .
.TP 
.B \-S
`Strip' the output by removing all symbols except locals and globals.
.TP 
.B  \-s
`Strip' the output, that is, remove the symbol table
and relocation bits to save space (this impairs the
usefulness of the debuggers).
This information can also be removed by strip(1).
.TP
.BI \-T\ number
Take the argument as a hexadecimal number which sets the text segment
origin. 
The default origin is 0.
.TP
.B \-t
("trace")  Print the name of each file as it is processed.
.TP 
.BI \-u\ symbol
Take the argument as a symbol and enter
it as undefined in the symbol table.  This is useful
for loading from a library, since initially the symbol
table is empty and an unresolved reference is needed
to force the loading of the first routine.
.TP 
.B  \-X
Save local symbols
except for those whose names begin with `L'.
This option is used by cc(1)
to discard internally-generated labels while
retaining symbols local to routines.
.TP 
.B  \-x
Do not preserve local
(nonglobal) symbols in the output symbol table; only enter
external symbols.
This option saves some space in the output file.
.TP
\fB\-y\fIsym\fR
Indicate each file in which
.I sym
appears, its type and whether the file defines or references it.
Many such options may be given to trace many symbols.
(It is usually necessary to begin
.I sym
with an `_', as external C and PASCAL variables begin with underscores.)
.TP
.B \-z
Arrange for the process to be loaded on
demand from the resulting executable file (413 format)
rather than preloaded.
This is the default.
It results in a 1024 byte header on the output file followed by
a text and data segment, whose size will be a multiple of 1024 bytes
(being padded out with nulls in the file if necessary).
With this format the first few BSS segment symbols may actually appear,
from the output of
size(1),
to live in the data segment.
This avoids wasting the space which results from 
the data segment size roundup.
.PP
The
.PN lk
linker
does not support the following 
.B ld
options:
.B \-A,
.B \-d,
or
.B \-r.
.SH RESTRICTIONS
The
.PN lk
commmand
pads the images which are to be demand loaded from
the file system to the next page boundary.
.PP
When linking code containing GFLOAT instructions,
the GFLOAT versions of 
.I libc
and/or the math library must be
used rather than the normal DFLOAT versions.  Link to these by using
.I \-lcg
and/or
.I \-lmg. 
.PP
The compiler and the linker lk(1)
cannot detect the use of mixed double floating point 
types, and your program may produce erroneous results.
.SH FILES
.ta \w'/usr/local/lib/lib*.a\ \ 'u
/lib/lib*.a	libraries
.br
/usr/lib/lib*.a	more libraries
.br
/usr/local/lib/lib*.a	still more libraries
.br
a.out	output file
.br
a.map	map file
.SH "SEE ALSO"
ar(1), as(1), cc(1), ld(1), ranlib(1)
.br
VAX FORTRAN Documentation
