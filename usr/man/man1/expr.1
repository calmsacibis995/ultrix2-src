.TH expr 1 
.SH NAME
expr \- evaluate arguments as an expression
.SH SYNTAX
.B expr
\fIarg\fR...
.SH DESCRIPTION
The arguments are taken as an expression.
After evaluation, the result is written on the standard output.
Each token of the expression is a separate argument.
.PP
The operators and keywords are listed below.
The list is in order of increasing precedence,
with equal precedence operators grouped.
.TP
.I expr
|
.I expr
Yields the first
.I expr
if it is neither null nor 0.  Otherwise
yields the second
.I expr.
.TP
.I expr
&
.I expr
Yields the first
.I expr
if neither
.I expr
is null or 0.  Otherwise yields 0.
.TP
.I expr relop expr
The
.I relop
is one of
< <= = != >= > and
yields 1 if the indicated comparison is true, '0' if false.
The comparison is numeric if both
.I expr
are integers, otherwise lexicographic.
.TP
.IR expr " + " expr
.br
.IR expr " - " expr
.br
Yields addition or subtraction of the arguments.
.TP
.IR expr " * " expr
.br
.IR expr " / " expr
.br
.IR expr " % " expr
.br
Yields multiplication, division, or remainder of the arguments.
.TP
.IR expr " : " expr
The matching operator compares the string first argument
with the regular expression second argument;
regular expression syntax is the same as that of
ed(1).
The
\fB\\(\|.\|.\|.\|\\)\fP
pattern symbols can be used to select a portion of the
first argument.
Otherwise,
the matching operator yields the number of characters matched
('0' on failure).
.TP
.RI ( " expr " )
parentheses for grouping.
.SH EXAMPLES
The first example adds 1 to the Shell variable \fIa\fP\^:
.EX
a=\`expr $a + 1\`
.EE
The second example finds the filename part (least significant part)
of the pathname stored in variable \fIa,
.EX
expr $a : \'.*/\e(\^.*\e)\' \'\^|\' $a
.EE
Note the quoted Shell metacharacters.
.SH DIAGNOSTICS
Returns the following exit codes:
.IP 0 3
The expression is neither null nor '0'.
.IP 1 3
The expression is null or '0'.
.IP 2 3
The expression is invalid.
.SH "SEE ALSO"
ed(1), sh(1), test(1)
