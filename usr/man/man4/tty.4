.de Ul
.ie t \\$1\l'|0\(ul'
.el \fI\\$1\fP
..
.TH tty 4
.SH NAME
tty \- general terminal interface
.SH SYNTAX
.B #include <sgtty.h>
.SH DESCRIPTION
This section describes
both a particular special file /dev/tty
and the terminal drivers used for conversational computing.
.LP
.B Line disciplines.
.PP
The system provides different
.I "line disciplines"
for controlling communications lines.
In this version of the system there are three disciplines available:
.IP "old" 8
The old (Version 7) terminal driver.  This is sometimes used when using the
standard shell
sh(1)
and for compatibility with other standard version 7 UNIX systems.
.IP "new"
The standard terminal driver, with features for job control; this must
be used when using csh(1).
.IP "net"
A line discipline used for networking and loading data into
the system over communications lines.  It allows high speed input
at very low overhead, and is described in bk(4).
.LP
Line discipline switching is accomplished with the TIOCSETD 
.I ioctl:
.IP
.B "int ldisc = LDISC; ioctl(filedes, TIOCSETD, &ldisc);"
.LP
where LDISC is OTTYDISC for the standard tty driver, NTTYDISC for the new
driver and NETLDISC for the networking discipline.
The standard (currently old) tty driver is discipline 0 by convention.
Other disciplines may exist for special purposes.
The current line discipline can be obtained with the TIOCGETD ioctl.
Pending input is discarded when the line discipline is changed.
.PP
All of the low-speed asynchronous
communications ports can use any
of the available line disciplines, no matter what
hardware is involved.
The remainder of this section discusses the
\*(lqold\*(rq and \*(lqnew\*(rq disciplines.
.LP
.B "The control terminal."
.LP
When a terminal file is opened, it causes the process to wait until a
connection is established.  In practice, user programs seldom open
these files; they are opened by
getty(8) or rlogind(8c)
and become a user's standard input and output file.
.PP
If a process which has no control terminal opens a terminal file, then
that terminal file becomes the control terminal for that process.
The control terminal is thereafter inherited by a child process during a
fork(2),
even if the control terminal is closed.
.LP
The file /dev/tty
is, in each process, a synonym for a
.I "control terminal"
associated with that process.  It is useful for programs that wish to
be sure of writing messages on the terminal
no matter how output has been redirected.
It can also be used for programs that demand a file name
for output, when typed output is desired
and it is tiresome to find out which terminal
is currently in use.
.LP
A process can remove the association it has with its controlling terminal by 
opening the file /dev/tty
and issuing an
.IP
\fBioctl(fildes, TIOCNOTTY, 0)\fR
.LP
This is often desirable in server processes.
.LP
.B "Process groups."
.LP
Command processors such as csh(1)
can arbitrate the terminal between different
.I jobs
by placing related jobs in a single process group and associating this
process group with the terminal.  A terminals associated process group
may be set using the TIOCSPGRP ioctl(2):
.IP
\fBioctl(fildes, TIOCSPGRP, &pgrp)\fR
.LP
or examined using TIOCGPGRP rather than TIOCSPGRP, returning the current
process group in
.I pgrp.
The new terminal driver aids in this arbitration by restricting access
to the terminal by processes which are not in the current process group;
see
.B "Job access control"
below.
.LP
.B "Modes."
.PP
The terminal drivers have three major modes, characterized by the
amount of processing on the input and output characters:
.IP cooked 10
The normal mode.  In this mode lines of input are collected and input editing
is done.  The edited line is made available when it is completed by
a newline
or when 
the
.I t_brkc 
character (normally undefined) or
.I t_eofc 
character (normally an EOT, control-D, hereafter ^D)
is entered.
A carriage return is usually made synonymous with newline in this mode,
and replaced with a newline whenever it is typed.
All driver functions
(input editing, interrupt generation,
output processing such as delay generation and tab expansion, etc.)
are available in this mode.
.IP CBREAK 10
This mode eliminates the character, word, and line editing input facilities,
making the input character available to the user program as it is typed.
Flow control, literal-next and interrupt processing are still done in this mode.
Output processing is done.
.IP RAW 10
This mode eliminates all input processing and makes all input characters
available as they are typed; no output processing is done either.
.PP
The style of input processing can also be very different when
the terminal is put in non-blocking i/o mode; see the FNDELAY flag described in
fcntl(2).
In this case a read(2)
from the control terminal will never block, but rather
return an error indication (EWOULDBLOCK) if there is no
input available.
.PP
A process may also request a SIGIO signal be sent it whenever input
is present
and also whenever output queues fall below the low-water mark.
To enable this mode the FASYNC flag should be set using
fcntl(2).
.LP
.B "Input editing."
.LP
A UNIX terminal ordinarily operates in full-duplex mode.
Characters may be typed at any time,
even while output is occurring, and are only lost when the
system's character input buffers become completely
choked, which is rare,
or when the user has accumulated the maximum allowed number of
input characters that have not yet been read by some program.
Currently this limit is 256 characters.
In RAW mode, the terminal driver throws away all input and output without notice
when the limit is reached.
In CBREAK mode or cooked mode it refuses to accept any further input and, if
in the new line discipline, rings the terminal bell.
.PP
Input characters are normally accepted in either even or odd parity
with the parity bit being stripped off before the character is given to
the program.  By clearing either the EVEN or ODD bit in the flags word
it is possible to have input characters with that parity discarded (see the
\fBSummary\fR below.)
.PP
In all of the line disciplines, it is possible to simulate terminal
input using the TIOCSTI ioctl, which takes, as its third argument,
the address of a character.  The system pretends that this character
was typed on the argument terminal, which must be the control terminal except
for the super-user (this call is not in standard version 7 UNIX).
.PP
Input characters are normally echoed by putting them in an output queue
as they arrive.  This may be disabled by clearing the ECHO bit in the
flags word using the
stty(3)
call or the TIOCSETN or TIOCSETP ioctls
(see the \fBSummary\fR below).
.PP
In cooked mode, terminal input is processed in units of lines.
A program attempting
to read will normally be suspended until an entire line has been
received
(but see the description of SIGTTIN in \fBModes\fR above and FIONREAD in
\fBSummary\fR below.)
No matter how many characters are requested
in the read call, at most one line will be returned.
It is not, however, necessary to read a whole line at
once; any number of characters may be
requested in a read, even one, without losing information.
.PP
During input, line editing is normally done, with the erase character 
.I sg_erase
(by default, '#')
logically erasing the last character typed and the 
.I sg_kill
character (by default, `@')
logically erasing the entire current input line.
These are often reset on crt's,
with ^H replacing #,
and ^U replacing @.
These characters
never erase beyond the beginning of the current input line or an eof.
These characters may be entered literally by
preceding them with `\e\|'; in the old teletype driver both the `\e\|' and
the character entered literally will appear on the screen; in the new
driver the `\e\|' will normally disappear.
.PP
The drivers normally treat either a carriage return or a newline character
as terminating an input line, replacing the return with a newline and echoing
a return and a line feed.
If the CRMOD bit is cleared in the local mode word then the processing
for carriage return is disabled, and it is simply echoed as a return,
and does not terminate cooked mode input.
.PP
In the new driver there is a literal-next character (normally ^V)
which can be typed
in both cooked and CBREAK mode preceding
.B any
character to prevent its special meaning to the terminal handler. 
This is to be preferred to the
use of `\e\|' escaping erase and kill characters, but `\e\|' is (at least
temporarily) retained with its old function in the new driver for historical
reasons.
.PP
The new terminal driver also provides two other editing characters in
normal mode.  The word-erase character, normally ^W, erases the preceding
word, but not any spaces before it.  For the purposes of ^W, a word
is defined as a sequence of non-blank characters, with tabs counted as
blanks.
Finally, the reprint character, normally ^R, retypes the pending input beginning
on a new line.  Retyping occurs automatically in cooked mode if characters
which would normally be erased from the screen are fouled by program output.
.LP
.B "Input echoing and redisplay"
.LP
In the old terminal driver, nothing special occurs when an erase character
is typed; the erase character is simply echoed.  When a kill character
is typed it is echoed followed by a new-line (even if the character is
not killing the line, because it was preceded by a `\e\|'!.)
.PP
The new terminal driver has several modes for handling the echoing of
terminal input, controlled by bits in a local mode word.
.LP
.I "Hardcopy terminals."
When a hardcopy terminal is in use, the LPRTERA bit is normally set in
the local mode word.  Characters which are logically erased are
then printed out backwards preceded by `\e\|' and followed by `/' in this mode.
.LP
.I "Crt terminals."
When a crt terminal is in use, the LCRTBS bit is normally set in the local
mode word.  The terminal driver then echoes the proper number of erase
characters when input is erased; in the normal case where the erase
character is a ^H this causes the cursor of the terminal to back up
to where it was before the logically erased character was typed.
If the input has become fouled due to interspersed asynchronous output,
the input is automatically retyped.
.LP
.I "Erasing characters from a crt."
When a crt terminal is in use, the LCRTERA bit may be set to cause
input to be erased from the screen with a \*(lqbackspace-space-backspace\*(rq
sequence when character or word deleting sequences are used.
A LCRTKIL bit may be set as well, causing the input to
be erased in this manner on line kill sequences as well.
.LP
.I "Echoing of control characters."
If the LCTLECH bit is set in the local state word, then non-printing (control)
characters are normally echoed as ^X (for some X)
rather than being echoed unmodified; delete is echoed as ^?.
.LP
The normal modes for using the new terminal driver on crt terminals
are speed dependent.
At speeds less than 1200 baud, the LCRTERA and LCRTKILL processing
is painfully slow, so 
stty(1)
normally just sets LCRTBS and LCTLECH; at
speeds of 1200 baud or greater all of these bits are normally set.
Stty(1)
summarizes these option settings and the use of the new terminal
driver as
\*(lqnewcrt.\*(rq
.LP
.B "Output processing."
.PP
When one or more
characters are written, they are actually transmitted
to the terminal as soon as previously-written characters
have finished typing.
(As noted above, input characters are normally 
echoed by putting them in the output queue
as they arrive.)
When a process produces characters more rapidly than they can be typed,
it will be suspended when its output queue exceeds some limit.
When the queue has drained down to some threshold
the program is resumed.
Even parity is normally generated on output.
The EOT character is not transmitted in cooked mode to prevent terminals
that respond to it from hanging up; programs using RAW or CBREAK mode
should be careful.
.PP
The terminal drivers provide necessary processing for cooked and CBREAK mode
output including delay generation for certain special characters and parity
generation.   Delays are available after backspaces ^H, form feeds ^L,
carriage returns ^M, tabs ^I and newlines ^J.  The driver will also optionally
expand tabs into spaces, where the tab stops are assumed to be set every
eight columns.  These functions are controlled by bits in the tty flags word;
see \fBSummary\fR below.
.PP
The terminal drivers provide for mapping between upper and lower case
on terminals lacking lower case, and for other special processing on
deficient terminals.
.PP
Finally, in the new terminal driver, there is a output flush character,
normally ^O, which sets the LFLUSHO bit in the local mode word, causing
subsequent output to be flushed until it is cleared by a program or more
input is typed.  This character has effect in both cooked and CBREAK modes
and causes pending input to be retyped if there is any pending input.
An ioctl to flush the characters in the input and output queues TIOCFLUSH,
is also available.
.LP
.B "Upper case terminals and Hazeltines"
.PP
If the LCASE bit is set in the tty flags, then
all upper-case letters are mapped into
the corresponding lower-case letter.
The upper-case letter may be generated by preceding
it by `\\'.
If the new terminal driver is being used,
then upper case letters
are preceded by a `\e\|' when output.
In addition, the following escape sequences can be generated
on output and accepted on input:
.PP
.nf
for	\`	|	~	{	}
use	\e\|\'	\e\|!	\e\|^	\e\|(	\e\|)
.fi
.PP
To deal with Hazeltine terminals, which do not understand that ~ has
been made into an ASCII character, the LTILDE bit may be set in the local
mode word when using the new terminal driver; in this case the character
~ will be replaced with the character \` on output.
.LP
.B "Flow control."
.PP
There are two characters (the stop character, normally ^S, and the
start character, normally ^Q) which cause output to be suspended and
resumed respectively.  Extra stop characters typed when output
is already stopped have no effect, unless the start and stop characters
are made the same, in which case output resumes.
.PP
A bit in the flags word may be set to put the terminal into TANDEM mode.
In this mode the system produces a stop character (default ^S) when
the input queue is in danger of overflowing, and a start character (default
^Q) when the input has drained sufficiently.  This mode is useful
when the terminal is actually another machine that obeys the
conventions.
.LP
.B "Line control and breaks."
.LP
There are several
.I ioctl
calls available to control the state of the terminal line.
The TIOCSBRK ioctl will set the break bit in the hardware interface
causing a break condition to exist; this can be cleared, 
usually after a delay with
sleep(3),
by TIOCCBRK.
Break conditions in the input are reflected as a null character in RAW mode
or as the interrupt character in cooked or CBREAK mode.
The TIOCCDTR ioctl will clear the data terminal ready condition; it can
be set again by TIOCSDTR.
.PP
When the carrier signal from the dataset drops (usually
because the user has hung up his terminal) a
SIGHUP hangup signal is sent to the processes in the distinguished
process group of the terminal; this usually causes them to terminate
(the SIGHUP can be suppressed by setting the LNOHANG bit in the local
state word of the driver.)
Access to the terminal by other processes is then normally revoked,
so any further reads will fail, and programs that read a terminal and test for
end-of-file on their input will terminate appropriately.
.PP
When using an ACU
it is possible to ask that the phone line be hung up on the last close
with the TIOCHPCL ioctl; this is normally done on the outgoing line.
.LP
.B "Interrupt characters."
.PP
There are several characters that generate interrupts in cooked and CBREAK
mode; all are sent the processes in the control group of the terminal,
as if a TIOCGPGRP ioctl were done to get the process group and then a
killpg(2)
system call were done,
except that these characters also flush pending input and output when
typed at a terminal
(\fI\z'a\`'la\fR TIOCFLUSH).
The characters shown here are the defaults; the field names in the structures
(given below)
are also shown.
The characters may be changed,
although this is not often done.
.IP ^?
\fBt_intrc\fR (Delete) generates a SIGINT signal.
This is the normal way to stop a process which is no longer interesting,
or to regain control in an interactive program.
.IP ^\e
\fBt_quitc\fR (FS) generates a SIGQUIT signal.
This is used to cause a program to terminate and produce a core image,
if possible,
in the file
.B core
in the current directory.
.IP ^Z
\fBt_suspc\fR (EM) generates a SIGTSTP signal, which is used to suspend
the current process group.
.IP ^Y
\fBt_dsuspc\fR (SUB) generates a SIGTSTP signal as ^Z does, but the
signal is sent when a program attempts to read the ^Y, rather than when
it is typed.
.LP
.B "Job access control."
.PP
When using the new terminal driver,
if a process which is not in the distinguished process group of its
control terminal attempts to read from that terminal its process group is
sent a SIGTTIN signal.  This signal normally causes the members of
that process group to stop. 
If, however, the process is ignoring SIGTTIN, has SIGTTIN blocked,
is an
.IR "orphan process" ,
or is in the middle of process creation using
vfork(2),
it is instead returned an end-of-file.  (An
.I "orphan process"
is a process whose
parent has exited and has been inherited by the
init(8)
process.)
Under older UNIX systems
these processes would typically have had their input files reset to
/dev/null, so this is a compatible change.
.PP
When using the new terminal driver with the LTOSTOP bit set in the local
modes, a process is prohibited from writing on its control terminal if it is
not in the distinguished process group for that terminal.
Processes which are holding or ignoring SIGTTOU signals, which are 
orphans, or which are in the middle of a vfork(2)
are excepted and allowed to produce output.
.LP
.B "Modem control."
.LP
Ioctl's have been added to provide more flexible modem control on
tty lines. The new commands are summarized below. 
.IP TIOCMODEM 15
Indicate to the system that this tty line has a modem attached to it
and should not ignore modem signals. 
The argument to this ioctl is the address of a word that contains
either zero or a nonzero value.
Zero indicates that the effect of the ioctl is temporary
and the line will be reset to its condition prior to the ioctl when
the tty line is closed.
Nonzero indicates that the effect of the ioctl should be permanent.
Root privilege is required to effect a permanent change.
.IP TIOCNMODEM
Indicate to the system that modem transmitions should be ignored on 
this line. This is useful for connections that do not implement the
full RS232 standard (most direct connections to terminals).
The argument to this ioctl is the address of a word that contains
either zero or a nonzero value.
Zero indicates that the effect of ioctl is temporary
and the line will be reset to its condition prior to the ioctl when
the tty line is closed.
Nonzero indicates that the effect of the ioctl should be permanent.
Root privilege is required to effect a permanent change.
.IP TIOCNCAR
Ignore soft carrier when doing reads or writes.  If carrier is not
present on a modem line then reads or writes will normally fail.
This ioctl will allow reads and writes to succeed regardless of the
state of this line.
This is useful for dealing with automatic call units that send status
messages before carrier is present on the line.
The alternative would be to use the TIOCNMODEM ioctl and ignore all modem
signals and force soft carrier to be present. 
The latter alternative is not desirable if full modem control is 
required.
.IP TIOCCAR
The opposite effect of TIOCNCAR.
If carrier is not present on modem lines then reads/writes will fail.
.IP TIOCWONLINE
This ioctl will block the process until carrier is detected.
.PP
The following example demonstrates how one might deal with a modem:
.nf
	/* open the line and dont wait for carrier */
	dh = open(dcname, O_RDWR|O_NDELAY); 
	/* we are attatched to a modem so dont ignore modem signals */
	ioctl(dh, TIOCMODEM, &temp);
	ioctl(dh, TIOCNCAR); 	/* ignore soft carr while dialing number */
	/* 
	 * dial phone number and negotiate with auto call unit.
	 */
	ioctl(dh, TIOCCAR);  	/* dont ignore carrier anymore */
	alarm(40);  		
	ioctl(dh, TIOCWONLINE); /* wait for carrier */
	alarm(0);
.fi
.LP
.B "Shared tty lines."
.LP
The following ioctl's are used by getty(8)/tip(1)/uucp(1) to 
implement shared terminal lines:  TIOCSINUSE/FIOSINUSE, 
TIOCCINUSE/FIOCINUSE.
Shared terminal lines can be used for both incoming and outgoing
connections (see System Managers Guide). 
These ioctl's can be used by any user process on any file type
(they will not work on a socket). 
.IP TIOCSINUSE 15
TIOCSINUSE is defined to FIOSINUSE.  This command will 
check to see if the file is marked "in use".
If the file is not "in use" it will be marked 
"in use" by the current process and the ioctl will succeed.
If the file is already "in use" by some other
process the ioctl will fail and errno will be set to EALREADY. 
See open(2).
.IP TIOCCINUSE 
TIOCCINUSE is defined to FIOCINUSE.  This command will 
clear the "in use" flag on a file if the current process was
the one that set the "in use" flag.
Any process that is blocked and waiting for the "in use"
flag to clear will be resumed. 
See open(2).
.LP
.B "Summary of modes."
.LP
Unfortunately, due to the evolution of the terminal driver,
there are 4 different structures which contain various portions of the
driver data.  The first of these (\fBsgttyb\fR)
contains that part of the information
largely common between version 6 and version 7 UNIX systems.
The second contains additional control characters added in version 7.
The third is a word of local state peculiar to the new terminal driver,
and the fourth is another structure of special characters added for the
new driver.  In the future a single structure may be made available
to programs which need to access all this information; most programs
need not concern themselves with all this state.
.LP
.Ul "Basic modes: sgtty."
.PP
The basic
.IR ioctl s
use the structure
defined in
.IR <sgtty.h> :
.PP
.ta .5i 1i
.nf
.ft 3
struct sgttyb {
	char	sg_ispeed;
	char	sg_ospeed;
	char	sg_erase;
	char	sg_kill;
	short	sg_flags;
};
.ft R
.fi
.PP
The
.I sg_ispeed 
and 
.I sg_ospeed
fields describe the input and output speeds of the
device according to the following table,
which corresponds to the DEC DH-11 interface.
If other hardware is used,
impossible speed changes are ignored.
Symbolic values in the table are as defined in
.IR <sgtty.h> .
.PP
.nf
.ta \w'B9600   'u +5n
B0	0	(hang up dataphone)
B50	1	50 baud
B75	2	75 baud
B110	3	110 baud
B134	4	134.5 baud
B150	5	150 baud
B200	6	200 baud
B300	7	300 baud
B600	8	600 baud
B1200	9	1200 baud
B1800	10	1800 baud
B2400	11	2400 baud
B4800	12	4800 baud
B9600	13	9600 baud
EXTA	14	External A
EXTB	15	External B
.fi
.DT
.PP
In the current configuration,
only 110, 150, 300 and 1200 baud are really supported on dial-up lines.
Code conversion and line control required for
IBM 2741's (134.5 baud)
must be implemented by the user's
program.
The half-duplex line discipline
required for the 202 dataset (1200 baud)
is not supplied; full-duplex 212 datasets work fine.
.PP
The
.I sg_erase
and
.I sg_kill
fields of the argument structure
specify the erase and kill characters respectively.
(Defaults are # and @.)
.PP
The
.I sg_flags
field of the argument structure
contains several bits that determine the
system's treatment of the terminal:
.PP
.ta \w'ALLDELAY 'u +\w'0100000 'u
.nf
ALLDELAY	0177400	Delay algorithm selection
BSDELAY	0100000	Select backspace delays (not implemented):
BS0	0
BS1	0100000
VTDELAY	0040000	Select form-feed and vertical-tab delays:
FF0	0
FF1	0100000
CRDELAY	0030000	Select carriage-return delays:
CR0	0
CR1	0010000
CR2	0020000
CR3	0030000
TBDELAY	0006000	Select tab delays:
TAB0	0
TAB1	0002000
TAB2	0004000
XTABS	0006000
NLDELAY	0001400	Select new-line delays:
NL0	0
NL1	0000400
NL2	0001000
NL3	0001400
EVENP	0000200	Even parity allowed on input (most terminals)
ODDP	0000100	Odd parity allowed on input
RAW	0000040	Raw mode: wake up on all characters, 8-bit interface
CRMOD	0000020	Map CR into LF; echo LF or CR as CR-LF
ECHO	0000010	Echo (full duplex)
LCASE	0000004	Map upper case to lower on input
CBREAK	0000002	Return each character as soon as typed
TANDEM	0000001	Automatic flow control
.DT
.fi
.PP
The delay bits specify how long
transmission stops to allow for mechanical or other movement
when certain characters are sent to the terminal.
In all cases a value of 0 indicates no delay.
.PP
Backspace delays are currently ignored but might
be used for Terminet 300's.
.PP
If a form-feed/vertical tab delay is specified,
it lasts for about 2 seconds.
.PP
Carriage-return delay type 1 lasts about .08 seconds
and is suitable for the Terminet 300.
Delay type 2 lasts about .16 seconds and is suitable
for the VT05 and the TI 700.
Delay type 3 is suitable for the concept-100 and pads lines
to be at least 9 characters at 9600 baud.
.PP
New-line delay type 1 is dependent on the current column
and is tuned for Teletype model 37's.
Type 2 is useful for the VT05 and is about .10 seconds.
Type 3 is unimplemented and is 0.
.PP
Tab delay type 1 is dependent on the amount of movement
and is tuned to the Teletype model
37.
Type 3, called XTABS,
is not a delay at all but causes tabs to be replaced
by the appropriate number of spaces on output.
.PP
The flags for even and odd parity control parity checking on input and
generation on output in cooked and CBREAK mode.  Even parity is generated on
output unless ODDP is set and EVENP is clear, in which case odd parity is
generated.  Input characters with the wrong parity, as determined by EVENP and
ODDP, are ignored in cooked and CBREAK mode.
.PP
RAW
disables all processing save output flushing with LFLUSHO;
full 8 bits of input are given as soon as
it is available; all 8 bits are passed on output.
A break condition in the input is reported as a null character.
If the input queue overflows in raw mode it is discarded; this applies
to both new and old drivers.
.PP
CRMOD causes input carriage returns to be turned into
new-lines;
input of either CR or LF causes LF-CR both to
be echoed
(for terminals with a new-line function).
.PP
CBREAK is a sort of half-cooked (rare?) mode.
Programs can read each character as soon as typed, instead
of waiting for a full line;
all processing is done except the input editing:
character and word erase and line kill, input reprint,
and the special treatment of \e or EOT are disabled.
.PP
TANDEM mode causes the system to produce
a stop character (default ^S) whenever the input
queue is in danger of overflowing, and a start character
(default ^Q)
when the input queue has drained sufficiently.
It is useful for flow control when the `terminal'
is really another computer which understands the conventions.
.LP
.Ul "Basic ioctls"
.PP
In addition to the TIOCSETD and TIOCGETD disciplines discussed
in \fBLine disciplines\fR above,
a large number of other
ioctl(2)
calls apply to terminals, and have the general form:
.PP
.B #include <sgtty.h>
.PP
.B ioctl(fildes, code, arg)
.br
.B struct sgttyb *arg;
.PP
The applicable codes are:
.IP TIOCGETP 15
Fetch the basic parameters associated with the terminal, and store
in the pointed-to \fIsgttyb\fR structure.
.IP TIOCSETP
Set the parameters according to the pointed-to \fIsgttyb\fR structure.
The interface delays until output is quiescent,
then throws away any unread characters,
before changing the modes.
.IP TIOCSETN
Set the parameters like TIOCSETP but do not delay or flush input.
Input is not preserved, however, when changing to or from RAW.
.PP
With the following codes the
.I arg
is ignored.
.IP TIOCEXCL 15
Set \*(lqexclusive-use\*(rq mode:
all open calls to this line have been closed.
.IP TIOCNXCL
Turn off \*(lqexclusive-use\*(rq mode.
.IP TIOCHPCL
When the file is closed for the last time,
hang up the terminal.
This is useful when the line is associated
with an ACU used to place outgoing calls.
.LP
Setting arg to the following values determines how TIOCFLUSH will function.
.IP TIOCFLUSH 15
FREAD flushes input queues.  FWRITE flushes output queues. 0 flushes both.
.LP
The remaining calls are not available in vanilla version 7 UNIX.
In cases where arguments are required, they are described; \fIarg\fR
should otherwise be given as 0.
.IP TIOCSTI 15
the argument is the address of a character which the system
pretends was typed on the terminal.
.IP TIOCSBRK 15
the break bit is set in the terminal.
.IP TIOCCBRK
the break bit is cleared.
.IP TIOCSDTR 
data terminal ready is set.
.IP TIOCCDTR
data terminal ready is cleared.
.IP TIOCSTOP
output is stopped as if the \*(lqstop\*(rq character had been typed.
.IP TIOCSTART
output is restarted as if the \*(lqstart\*(rq character had been typed.
.IP TIOCGPGRP
arg is the address of a word into which is placed the process group
number of the control terminal.
.IP TIOCSPGRP
arg is a word (typically a process id) which becomes the process
group for the control terminal.
.IP FIONREAD
returns in the long integer whose address is arg the number
of immediately readable characters from the argument unit.
.LP
.Ul Tchars
.PP
The second structure associated with each terminal specifies
characters that are special in both the old and new terminal interfaces:
The following structure is defined in
.IR <sys/ioctl.h> ,
which is automatically included in
.IR <sgtty.h> :
.PP
.nf
.ft 3
.ta .5i 1i 2i 
struct tchars {
	char	t_intrc;	/* interrupt */
	char	t_quitc;	/* quit */
	char	t_startc;	/* start output */
	char	t_stopc;	/* stop output */
	char	t_eofc;		/* end-of-file */
	char	t_brkc;		/* input delimiter (like nl) */
};
.DT
.fi
.ft R
.PP
The default values for these characters are
^?, ^\e\|, ^Q, ^S, ^D, and \-1.
A character value of \-1
eliminates the effect of that character.
The
.I t_brkc
character, by default \-1,
acts like a new-line in that it terminates a `line,'
is echoed, and is passed to the program.
The `stop' and `start' characters may be the same,
to produce a toggle effect.
It is probably counterproductive to make
other special characters (including erase and kill)
identical.
The applicable ioctl calls are:
.IP TIOCGETC 12
Get the special characters and put them in the specified structure.
.IP TIOCSETC 12
Set the special characters to those given in the structure.
.LP
.Ul "Local mode"
.PP
The third structure associated with each terminal is a local mode word;
except for the LNOHANG bit, this word is interpreted only when the new
driver is in use.
The bits of the local mode word are:
.sp
.nf
LCRTBS	000001	Backspace on erase rather than echoing erase
LPRTERA	000002	Printing terminal erase mode
LCRTERA	000004	Erase character echoes as backspace-space-backspace
LTILDE	000010	Convert ~ to \` on output (for Hazeltine terminals)
LMDMBUF	000020	Stop/start output when carrier drops (unimplemented)
LLITOUT	000040	Suppress output translations
LTOSTOP	000100	Send SIGTTOU for background output
LFLUSHO	000200	Output is being flushed
LNOHANG	000400	Don't send hangup when carrier drops
LETXACK	001000	Diablo style buffer hacking (unimplemented)
LCRTKIL	002000	BS-space-BS erase entire line on line kill
LCTLECH	010000	Echo input control chars as ^X, delete as ^?
LPENDIN	020000	Retype pending input at next read or input character
LDECCTQ	040000	Only ^Q restarts output after ^S, like DEC systems
LNOFLSH	100000	Flush output on receipt of "suspend character"
.fi
.sp
The applicable
.I ioctl
functions are:
.IP TIOCLBIS 15
arg is the address of a 
mask which is the bits to be set in the local mode word.
.IP TIOCLBIC
arg is the address of a mask of bits to be cleared in the local mode word.
.IP TIOCLSET
arg is the address of a mask to be placed in the local mode word.
.IP TIOCLGET
arg is the address of a word into which the current mask is placed.
.LP
.Ul "Local special chars"
.PP
The
final structure associated with each terminal is the
.I ltchars
structure which defines interrupt characters
for the new terminal driver.
Its structure is:
.nf
.sp
.ta .5i 1i 2i
.ft B
struct ltchars {
	char	t_suspc;	/* stop process signal */
	char	t_dsuspc;	/* delayed stop process signal */
	char	t_rprntc;	/* reprint line */
	char	t_flushc;	/* flush output (toggles) */
	char	t_werasc;	/* word erase */
	char	t_lnextc;	/* literal next character */
};
.ft R
.fi
.sp
The default values for these characters are ^Z, ^Y, ^R, ^O, ^W, and ^V.
A value of \-1 disables the character.
.PP
The applicable \fIioctl\fR functions are:
.IP TIOCSLTC 12
args is the address of a 
.I ltchars
structure which defines the new local special characters.
.IP TIOCGLTC 12
args is the address of a
.I ltchars
structure into which is placed the current set of local special characters.
.SH RESTRICTIONS
Half-duplex terminals are not supported.
.SH FILES
/dev/tty
.br
/dev/tty*
.br
/dev/console
.SH SEE ALSO
csh(1), stty(1), tset(1), ioctl(2), sigvec(2), stty(3c), getty(8)
