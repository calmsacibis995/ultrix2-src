.TH dup 2
.SH NAME
dup, dup2 \- duplicate a descriptor
.SH SYNTAX
.nf
.ft B
newd = dup(oldd)
int newd, oldd;
.PP
.ft B
dup2(oldd, newd)
int oldd, newd;
.fi
.SH DESCRIPTION
The 
.PN dup
system call duplicates an existing object descriptor.
The argument \fIoldd\fP is a small non-negative integer index in
the per-process descriptor table.  The value must be less
than the size of the table, which is returned by getdtablesize(2).
The new descriptor
.I newd
returned by the call is the lowest numbered descriptor which is
not currently in use by the process.
.PP
The object referenced by the descriptor does not distinguish
between references using \fIoldd\fP and \fInewd\fP in any way.
Thus if \fInewd\fP and \fIoldd\fP are duplicate references to an open
file, read(2), write(2) and lseek(2)
calls all move a single pointer into the file.
If a separate pointer into the file is desired, a different
object reference to the file must be obtained by issuing an
additional open(2) call.
.PP
In the second form of the call, the value of
.IR newd
desired is specified.  If this descriptor is already
in use, the descriptor is first deallocated as if a close(2)
call had been done first.
.PP
The value \-1 is returned if an error occurs in either call.
The external variable
.I errno
indicates the cause of the error.
.SH DIAGNOSTICS
The
.PN dup
and
.PN dup2
system calls fail if:
.TP 15
[EBADF]
\fIOldd\fP or
\fInewd\fP is not a valid active descriptor
.TP 15
[EMFILE]
Too many descriptors are active.
.SH "SEE ALSO"
accept(2), close(2), getdtablesize(2), open(2), pipe(2), socket(2),
socketpair(2)
