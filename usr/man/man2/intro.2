.TH intro 2
.de en
.HP
\\$1  \\$2  \\$3
.br
..
.SH NAME
intro, errno \- introduction to system calls and error numbers
.SH SYNTAX
.B #include <errno.h>
.SH DESCRIPTION
Section 2 describes the ULTRIX system calls, which are the
entries into the ULTRIX kernel.
Certain distinctions of purpose are made in the headings.  
Pages ending in (2yp) are specific to the Yellow Pages (YP)
service.  Pages ending in (2nfs) are specific to the Network
File System (NFS) service.
.SH SYSTEM V COMPATIBILITY
Some system calls 
contain System V compatibility features that
are available to general ULTRIX-32 programs.   This compatibility
sometimes conflict with features already present in ULTRIX;
the function performed may be slightly different in
the System V environment.  These features are provided for
applications that are being ported from System V.
.PP
The descriptions in this section include an ENVIRONMENT section
that describes any differences in function between System V
and the standard C runtime library.
.PP
The System V compatibility features are not contained in the standard C
runtime library.  To get System V specific behavior, you must
specify that the System V environment is to be used in compiling
and linking programs.  There are two ways to do this:
.IP .3i
Use the \fB\-Y\fR option for the cc(1) command.
.IP .3i
Globally set the environment variable PROG_ENV to
SYSTEM_FIVE.  If you are using the C shell,
execute the following line or include it 
in your .login file:
.EX
setenv PROG_ENV SYSTEM_FIVE  
.EE
If you are using the Bourne shell, execute the
following line or include it in your .profile file:
.EX
PROG_ENV=SYSTEM_FIVE ; export PROG_ENV
.EE
.PP
In both cases, the 
.PN cc
command defines the preprocessor symbol SYSTEM_FIVE, so that
the C preprocessor, /lib/cpp, 
will select the 
System V version of various data structures and symbol
definitions.
.PP
In addition, if 
.PN cc 
invokes 
.PN ld, 
the library libcV.a 
(the System V version of the
Standard C library) is searched before libc.a
to resolve references to the System-V-specific routines.
Also, if the 
.B \-lm 
option is specified on either the cc(1)
or the ld(1) 
command line, then the System V version of the math library will
be used instead of the ULTRIX math library.
.SH RETURN VALUE
Most
of the system calls have one or more return values.
An error condition is indicated by an otherwise impossible return
value.  This is almost always \-1; the individual descriptions
specify the details.
.PP
All return codes and values from
functions are of type integer unless otherwise noted.
An error number is also made available in the external
variable 
.I errno 
which is not cleared on successful calls.  Thus 
.I errno 
should be tested only after an error has occurred.
.PP
Here is a list of the errors and their
names as given in < errno.h >.
.en 0 \h'\w'EIO'u' "Error 0
Unused.
.en 1 EPERM "Not owner
Typically this error indicates
an attempt to modify a file in some way forbidden
except to its owner or superuser.
It is also returned for attempts
by ordinary users to do things
allowed only to the superuser.
.en 2 ENOENT "No such file or directory
This error occurs when a file name is specified
and the file should exist but does not, or when one
of the directories in a pathname does not exist.
.en 3 ESRCH "No such process
The process whose number was given to kill(2)
and ptrace(2)
does not exist or is already dead.
.en 4 EINTR "Interrupted system call
An asynchronous signal (such as interrupt or quit),
which the user has elected to catch,
occurred during a system call.
If execution is resumed
after processing the signal,
it will appear as if the interrupted system call
returned this error condition.
.en 5 EIO "I/O error
Some physical I/O error occurred during a
.PN read
or
.PN write .
This error may occur
on a call following the one to which it actually applies.
.en 6 ENXIO "No such device or address
I/O on a special file refers to a subdevice that does not
exist or beyond the limits of the device.
It may also occur when an illegal tape drive
unit number is selected 
or a disk pack is not loaded on a drive.
.en 7 E2BIG "Arg list too long
An argument list longer than 10240 bytes
is presented to execve(2).
.en 8 ENOEXEC "Exec format error
A request is made to execute a file
that does not start with a valid magic number,
although it has the appropriate permissions.
For further information, see a.out(5).
.en 9 EBADF "Bad file number
Either a file descriptor refers to no
open file
or a read (respectively, write) request is made to
a file which is open only for writing (respectively, reading).
.en 10 ECHILD "No children
A
.I wait
and the process has no
living or unwaited-for children.
.en 11 EAGAIN "No more processes
In a
.I fork,
the system's process table is full
or the user is not allowed to create any more
processes.
.en 12 ENOMEM "Not enough core
During an execve(2)
or 
.PN brk,
a program asks for more core or swap space than the system is
able to supply.
A lack of swap space is normally a temporary condition.  However,
a lack of core
is not a temporary condition; the maximum size
of the text, data, and stack segments is a system parameter.
.en 13 EACCES "Permission denied
An attempt was made to access a file in some way forbidden
by the protection system.
.en 14 EFAULT "Bad address
The system encountered a hardware fault in attempting to
access the arguments of a system call.
.en 15 ENOTBLK "Block device required
A plain file was mentioned where a block device was required,
for example, in mount(2).
.en 16 EBUSY "Mount device busy
An attempt was made to mount a device that was already mounted
or to unmount a device
on which there was an active file directory, an
open file, current directory, mounted-on file, or active text segment.
Or,
an attempt was made to modify a partition table incorrectly.
See the restrictions in chpt(8).
.en 17 EEXIST "File exists
An existing file was mentioned in an inappropriate context.
.en 18 EXDEV "Cross-device link
A hard link to a file on another device
was attempted.
.en 19 ENODEV "No such device
An attempt was made to apply an inappropriate
system call to a device;
for example, read a write-only device.
.en 20 ENOTDIR "Not a directory
A non-directory was specified where a directory
is required,
for example in a path name or
as an argument to chdir(2).
.en 21 EISDIR "Is a directory
An attempt to write on a directory.
.en 22 EINVAL "Invalid argument
An invalid argument:
dismounting a non-mounted
device,
mentioning an unknown signal in signal(3),
reading or writing a file for which
.I seek
has generated a negative pointer.
Also set by math functions, see intro(3).
.en 23 ENFILE "File table overflow
The system's table of open files is full,
and temporarily no more
.I opens
can be accepted.
.en 24 EMFILE "Too many open files
Customary configuration limit is 20 files per process.
.en 25 ENOTTY "Not a typewriter
The file mentioned in an ioctl(2)
is not a terminal or one of the other
devices to which these calls apply.
.en 26 ETXTBSY "Text file busy
An attempt to execute a pure-procedure
program which is currently open for writing
or reading.
Also an attempt to open for writing a pure-procedure
program that is being executed.
.en 27 EFBIG "File too large
The size of a file exceeded the maximum (about
.if t 10\u\s-29\s+2\d
.if n 1.0E9
bytes).
.en 28 ENOSPC "No space left on device
During a write to an ordinary file,
there is no free space left on the device.
.en 29 ESPIPE "Illegal seek
An lseek(2)
was issued to a pipe.
This error may also be issued for
other non-seekable devices.
.en 30 EROFS "Restricted operation on a file system
An attempt to access a file or directory
on a mounted file system when that permission has been revoked. 
For example, trying to write a file on a file system mounted read only.
.en 31 EMLINK "Too many links
An attempt to make more than 32767 hard links to a file.
.en 32 EPIPE "Broken pipe
A write on a pipe or socket for which there is no process
to read the data.
This condition normally generates a signal;
the error is returned if the signal is ignored.
.en 33 EDOM "Argument too large"
The argument of a function in the math package Section (3m)
is out of the domain of the function.
.en 34 ERANGE "Result too large
The value of a function in the math package Section (3m)
is unrepresentable within machine precision.
.en 35 EWOULDBLOCK "Operation would block"
An operation which would cause a process to block was attempted
on a object in non-blocking mode.
For further information, see ioctl(2).
.en 36 EINPROGRESS "Operation now in progress"
An operation which takes a long time to complete, such as
.PN connect(2), 
was attempted on a non-blocking object.
For further information, see ioctl(2).
.en 37 EALREADY "Operation already in progress"
An operation was attempted on a non-blocking object which already
had an operation in progress.
.en 38 ENOTSOCK "Socket operation on non-socket"
Self-explanatory.
.en 39 EDESTADDRREQ "Destination address required"
A required address was omitted from an operation on a socket.
.en 40 EMSGSIZE "Message too long"
A message sent on a socket was larger than the internal message buffer.
.en 41 EPROTOTYPE "Protocol wrong type for socket"
A protocol was specified which does not support the semantics of the
socket type requested. For example you cannot use the ARPA Internet
UDP protocol with type SOCK_STREAM.
.en 42 ENOPROTOOPT "Protocol not available"
A bad option was specified in a getsockopt(2)
or setsockopt(2)
call.
.en 43 EPROTONOSUPPORT "Protocol not supported"
The protocol has not been configured into the
system or no implementation for it exists.
.en 44 ESOCKTNOSUPPORT "Socket type not supported"
The support for the socket type has not been configured into the
system or no implementation for it exists.
.en 45 EOPNOTSUPP "Error--operation not supported"
For example, trying to accept a connection on a datagram socket.
.en 46 EPFNOSUPPORT "Protocol family not supported"
The protocol family has not been configured into the
system or no implementation for it exists.
.en 47 EAFNOSUPPORT "Address family not supported by protocol family"
An address incompatible with the requested protocol was used.
For example, you should not expect to be able to use PUP
Internet addresses with ARPA Internet protocols.
.en 48 EADDRINUSE "Address already in use"
Each address can be used only once.
.en 49 EADDRNOTAVAIL "Can't assign requested address"
Normally results from an attempt to create a socket with an
address not on this machine.
.en 50 ENETDOWN "Network is down"
A socket operation encountered a dead network.
.en 51 ENETUNREACH "Network is unreachable"
A socket operation was attempted to an unreachable network.
.en 52 ENETRESET "Network dropped connection on reset"
The host you were connected to crashed and rebooted.
.en 53 ECONNABORTED "Software caused connection abort"
A connection abort was caused internal to your host machine.
.en 54 ECONNRESET "Connection reset by peer"
A connection was forcibly closed by a peer.  This usually
results from the peer executing a shutdown(2) call.
.en 55 ENOBUFS "No buffer space available"
An operation on a socket or pipe was not performed because
the system lacked sufficient buffer space.
.en 56 EISCONN "Socket is already connected"
A
.I connect
request was made on an already connected socket; or,
a
.I sendto
or
.I sendmsg
request on a connected socket specified a destination
other than the connected party.
.en 57 ENOTCONN "Socket is not connected"
An request to send or receive data was disallowed because
the socket is not connected.
.en 58 ESHUTDOWN "Can't send after socket shutdown"
A request to send data was disallowed because the socket
had already been shut down with a previous shutdown(2) 
call.
.en 59 ETOOMANYREFS "Too many references: can't splice"
.en 60 ETIMEDOUT "Connection timed out"
A
.I connect
request failed because the connected party did not
properly respond after a period of time.  (The timeout
period is dependent on the communication protocol.)
A
.I connect
request or remote file operation failed because the connected
party did not properly respond after a period of time which is
dependent on the communication protocol.  For example, this
occurs when an NFS file system is mounted with the ``soft''
option and the server is not responding to file operation
requests.
.en 61 ECONNREFUSED "Connection refused"
No connection could be made because the target machine actively
refused it.  This usually results from trying to connect
to a service which is inactive on the foreign host.
.en 62 ELOOP "Too many levels of symbolic links"
A path name lookup involved more than 8 symbolic links.
.en 63 ENAMETOOLONG "File name too long"
A component of a path name exceeded 255 characters, or an entire
path name exceeded 1023 characters.
.en 64 EHOSTDOWN "Host is down" 
A socket operation failed because the destination host was down.
.en 65 EHOSTUNREACH "No route to host"
A socket operation was attempted to an unreachable host.
.en 66 ENOTEMPTY "Directory not empty"
A directory with entries other than ``.'' and ``..'' was
supplied to a remove directory or rename call.
.en 67 EPROCLIM "Too many processes"
The user would exceed the number of user processes that are
available.  This limit can be changed by changing the
.I maxuprc
option in the configuration file when the kernel
is built.
.en 68 EUSERS "Too many users"
This error is returned when a login process would exceed the
maximum allowable login processes that the system is
licensed for.
.en 69 EDQUOT "Disk quota exceeded"
A
.PN write
to an ordinary file, the creation of a directory or symbolic
link, or the creation of a directory entry failed because the
user's quota of disk blocks was exhausted, or the allocation
of an inode for a newly created file failed because the user's
quota of inodes was exhausted.
.en 70 ESTALE 
An NFS stale file handle.  Information used by the operating
system to identify a file in an NFS file system is no longer  
valid.  This error code results from operating on a remote file
that no longer exists on the server or resides in a file system
that has been moved to a different device on the server.
.en 71 EREMOTE
Remote NFS client has requested an operation on a file
that is remote to the server as well.  An attempt has been 
made to mount an NFS remote file system that is not local to the
specified server.  This error code cannot occur except in response
to a failed mount(2).
.en 72 ENOMSG "No message of desired type"
An attempt was made to receive a message of a type that does not
exist on the specified message queue; see
msgop(2).
.en 73 EIDRM "Identifier removed"
In semaphores, shared memory, or message queues, the caller
tried to access the identifier after it had been removed
from the system.
.en 74 EALIGN "alignment error"
Alignment error of some type, for example, cluster,
page, or block.
.SH DEFINITIONS
.TP 5
Process ID
.br
Each active process in the system is uniquely identified by a positive
integer called a process ID.  The range of this ID is from
0 to {PROC_MAX}.
.TP 5
Parent process ID
.br
A new process is created by a currently active process.  For further
information, see fork(2).
The parent process ID of a process is the process ID of its creator.
.TP 5
Process Group ID
.br
Each active process is a member of a process group that is identified by
a positive integer called the process group ID.  This is the process
ID of the group leader.  This grouping permits the signaling of related
processes.  For further information, see killpg(2)
and the job control mechanisms of csh(1).
.TP 5
Tty Group ID
.br
Each active process can be a member of a terminal group
that is identified
by a positive integer called the tty group ID.  This grouping is used
to arbitrate between multiple jobs contending for the same terminal.
For further information, see csh(1) 
and tty(4).
.TP 5
Real User ID and Real Group ID
.br
Each user on the system is identified by a positive integer
termed the real user ID.
.IP
Each user is also a member of one or more groups. 
One of these groups is distinguished from others and
used in implementing accounting facilities.  The positive
integer corresponding to this distinguished group is termed 
the real group ID.
.IP
All processes have a real user ID and real group ID.
These are initialized from the equivalent attributes
of the process which created it.
.TP 5
Effective User Id, Effective Group Id, and Access Groups
.br
Access to system resources is governed by three values:
the effective user ID, the effective group ID, and the
group access list.
.IP
The effective user ID and effective group ID are initially the
process's real user ID and real group ID respectively.  Either
may be modified through execution of a set-user-ID or set-group-ID
file, possibly by one its ancestors.  For further information, see
execve(2).
.IP
The group access list is an additional set of group ID's
used only in determining resource accessibility.  Access checks
are performed as described below in ``File Access Permissions''.
.TP 5
Superuser
.br
A process is recognized as a superuser
process and is granted special privileges 
if its effective user ID is 0.
.TP 5
Special Processes
.br
The processes with a process ID's of 0, 1, and 2 are special.
Process 0 is the scheduler.  Process 1 is the initialization process
.IR init ,
and is the ancestor of every other process in the system.
It is used to control the process structure.
Process 2 is the paging daemon.
.TP 5
Descriptor
.br
An integer assigned by the system when a file is referenced
by open(2), "dup (2)," or pipe(2)
or a socket is referenced by socket(2) 
or socketpair(2)
which uniquely identifies an access path to that file or socket from
a given process or any of its children.
.TP 5
File Name
.br
Names consisting of up to {FILENAME_MAX} characters may be used to name
an ordinary file, special file, or directory.
.IP
These characters may be selected from the set of all ASCII character
excluding 0 (null) and the ASCII code for / (slash).  (The parity bit,
bit 8, must be 0.)
.IP
Note that it is generally unwise to use *, ?, or [ ] as part of
file names because of the special meaning attached to these characters
by the shell.
.TP 5
Path Name
.br
A path name is a null-terminated character string starting with an
optional slash (/), followed by zero or more directory names separated
by slashes, optionally followed by a file name.
The total length of a path name must be less
than {PATHNAME_MAX} characters.
.IP
If a path name begins with a slash, the path search begins at the
.B root
directory.
Otherwise, the search begins from the current working directory.
A slash by itself names the root directory.  A null
pathname refers to the current directory.
.TP 5
Directory
.br
A directory is a special type of file which contains entries
which are references to other files.
Directory entries are called links.  By convention, a directory
contains at least two links, . and .., referred to as
.I dot
and
.I dot-dot
respectively.  Dot refers to the directory itself and
dot-dot refers to its parent directory.
.TP 5
Root Directory and Current Working Directory
.br
Each process has associated with it a concept of a root directory
and a current working directory for the purpose of resolving path
name searches.  A process's root directory need not be the root
directory of the root file system.
.TP 5
File Access Permissions
.br
Every file in the file system has a set of access permissions.
These permissions are used in determining whether a process
may perform a requested operation on the file, such as opening
a file for writing.  Access permissions are established at the
time a file is created.  They may be changed at some later time
through the chmod(2) call. 
.IP
File access is broken down according to whether a file may be read,
written, or executed.  Directory files use the execute
permission to control if the directory may be searched. 
.IP
File access permissions are interpreted by the system as
they apply to three different classes of users: the owner
of the file, those users in the file's group, anyone else.
Every file has an independent set of access permissions for
each of these classes.  When an access check is made, the system
decides if permission should be granted by checking the access
information applicable to the caller.
.IP
Read, write, and execute/search permissions on
a file are granted to a process if:
.IP
The process's effective user ID is that of the superuser.
.IP
The process's effective user ID matches the user ID of the owner
of the file and the owner permissions allow the access.
.IP
The process's effective user ID does not match the user ID of the
owner of the file, and either the process's effective
group ID matches the group ID
of the file, or the group ID of the file is in
the process's group access list,
and the group permissions allow the access.
.IP
Neither the effective user ID nor the effective group ID
and group access list of the process
match the corresponding user ID and group ID of the file,
but the permissions for other users allow access.
.IP
If the process is trying to ``exec'' an image and the file
system is mounted ``no exec'', execute permission will be
denied.  
.IP
If the process's effective UID is not root, the
process is attempting to access a character or block special
device, and the file system is mounted with ``nodev'', 
access will be denied.
.IP
If the process's effective UID is not root, the process is trying
to execute an image with 
.I setuid
or
.I setgid,
bit
set in the file's permissions, and the file system is mounted
``nosuid'', execute permission will be denied.
.IP
Otherwise, permission is denied.
.TP 5
Sockets and Address Families
.IP
A socket is an endpoint for communication between processes.
Each socket has queues for sending and receiving data.
.IP
Sockets are typed according to their communications properties.
These properties include whether messages sent and received
at a socket require the name of the partner, whether communication
is reliable, and whether the format is
used in naming message recipients.
.IP
Each instance of the system supports some
collection of socket types.  Consult socket(2)
for more information about the types available and
their properties.
.IP
Each instance of the system supports some number of sets of
communications protocols.  Each protocol set supports addresses
of a certain format.  An Address Family is the set of addresses
for a specific group of protocols.  Each socket has an address
chosen from the address family in which the socket was created.
.TP 5
Message Queue Identifier
.IP
A message queue identifier (
.I msqid
) is a unique positive integer
created by a msgget(2)
system call.  Each
.I msqid
has a message queue and a data
structure associated with it.  The data structure is referred
to as
.B msqid_ds
and contains the following members:
.EX 0
struct  ipc_perm msg_perm; /*operation permission struct*/
ushort  msg_qnum;          /*number of msgs on q*/
ushort  msg_qbytes;        /*max number of bytes on q*/
ushort  msg_lspid;         /*pid of last msgsnd operation*/
ushort  msg_lrpid;         /*pid of last msgrcv operation*/
time_t  msg_stime;         /*last msgsnd time*/
time_t  msg_rtime;         /*last msgrcv time*/
time_t  msg_ctime;         /*last change time*/
                           /*Times measured in secs since*/
                           /*00:00:00 GMT, Jan.1, 1970*/
.EE
.B Msg_perm
is an ipc_perm structure that specifies the message operation
permission (see below).  This structure includes the following
members:
.EX
ushort  cuid;     /*creator user id*/
ushort  cgid;     /*creator group id*/
ushort  uid;      /*user id*/
ushort  gid;      /*group id*/
ushort  mode;     /*r/w permission*/
.EE
.B Msg_qnum
is the number of message currently on the queue.
.B Msg_qbytes
is the maximum number of bytes allowed on the queue.
.B Msg_lspid
is the process id of the last process that performed a
msgrcv(2) operation.
The
.B msg_lrpid
is the process id of the last process that performed a
.PN msgop
operation.
Th3
.B msg_stime
is the time of the last
msgop(2)
operation,
.B msg_rtime
is the time of the last
.PN msgrcv
operation, and
.B msg_ctime
is the time of the last msgctl(2)
operation that changed a member of the above structure.
.TP 5
Message Operation Permissions
.IP
In the msgop(2) 
and msgctl(2)
system call descriptions, the permission required for an
operation is given as ``{token}'', where token is the
type of permission needed, interpreted as follows:
.EX
00400    Read by user
00200    Write by user
00060    Read, Write by group
00006    Read, Write by others
.EE
Read and write permissions are granted to a process if
one or more of the following are true:
.RS
.IP "1."
The effective user ID of the process is superuser.
.IP "2."
The effective user ID of the process matches
.B msg_perm.[c]uid
in the data structure associated with
.I msqid
and the appropriate bit of the user portion
(0600) of
.B msg_perm.mode
is set.
.IP "3."
The effective user ID of the process does not match
.B msg_perm.[c]uid
and the effective group ID of the process matches
.B msg_perm.[c]gid
and the appropriate bit of the group portion (060)
of
.B msg_perm.mode
is set.
.IP "4."
The effective user ID of the process does not match
.B msg_perm.[c]uid
and the effective group ID of the process does not match
.B msg_perm.[c]gid
and the appropriate bit of the other portion (06) of
.B msg_perm.mode
is set.
.RE
.IP
Otherwise, the corresponding permissions are denied.
.TP 5
Semaphore Identifier
.IP
A semaphore identifier (semid) is a unique positive integer
created by a semget(2)
system call.  Each semid has a set of semaphores and a
data structure associated with it.  The data structure
is referred to as
.I semid_ds
and contains the following members:
.EX 0
struct  ipc_perm sem_perm; /*operation permission struct*/
ushort  sem_nsems;         /*number of sems in set */
time_t  sem_otime;         /*last operation time*/
time_t  sem_ctime;         /*last change time*/
                           /*Times measured in secs since*/
                           /*00:00:00 GMT, Jan. 1, 1970*/
.EE
.B Sem_perm
is an ipc_perm structure that specifies the semaphore
operation permission.  This structure includes
the following members:
.EX 0
ushort cuid;  /*creator user id*/
ushort cgid;  /*creator group id*/
ushort uid;   /*user id*/
ushort gid;   /*group id*/
ushort mode;  /*r/a permission*/
.EE
The value of
.B sem_nsems
is equal to the number of semaphores in the set.  Each
semaphore in the set is referenced by a positive integer
referred to as a
.B sem_num.
The
sem_num values run sequentially from 0 to the value of
sem_nsems minus 1.
The
.B sem_otime
is the time of the last semop(2) operation, and
.B sem_ctime
is the time of the last semctl(2)
operation that changed a member of the above structure.
.IP
A semaphore is a data structure that contains the following
members:
.EX 0
ushort  semval;  /*semaphore value*/
short   sempid;  /*pid of last operation*/
ushort  semncnt; /*# awaiting semval > cval*/
ushort  semzcnt; /*# awaiting semval = 0*/
.EE
.B Semval
is a non-negative integer.
.B Sempid
is equal to the process ID of the last
process that performed a semaphore operation on this
semaphore.
.B Semncnt
is a count of the number of processes that are currently
suspended awaiting this semaphore's semval to become greater
than its current value.
.B Semzcnt
is a count of the number of processes that are currently suspended
awaiting this semaphore's semval to become zero.
.TP 5
Semaphore Operation Permissions
.IP
In the semop(2) and semctl(2)
system call descriptions, the permission required for an operation
is given as ``{token}'', where token is the type of permission
needed interpreted as follows:
.EX
00400   Read by user
00200   Alter by user
00060   Read, Alter by group
00006   Read, Alter by others
.EE
Read and alter permissions on a semid are granted to a process
if one or more of the following are true:
.RS
.IP "1."
The effective user ID of the process is superuser.
.IP "2."
The effective user ID of the process matches
.B sem_perm.[c]uid
in the data structure associated with
.PN semid
and the appropriate bit of the user portion (0600) of
.B sem_perm.mode
is set.
.IP "3."
The effective user ID of the process does not match
.B sem_perm.[c]uid
and the effective group ID of the process matches
.B sem_perm.[c]gid
and the appropriate bit of the group portion (060) of
.B sem_perm.mode
is set.
.IP "4."
The effective user ID of the process does not match
.B sem_perm.[c]uid
and the effective group ID of the process does not match
.B sem_perm.[c]gid
and the appropriate bit of the other portion (06) of
.B sem_perm.mode is set.
.RE
.IP
Otherwise, the corresponding permissions are denied.
.TP 5
Shared Memory Identifier
.IP
A shared memory identifier (shmid) is a unique positive
integer created by a 
shmget(2)
system call.  Each shmid has a segment of memory (referred
to as a shared memory segment) and a data structure associated
with it.  The data structure is referred to as
.PN shmid_ds
and contains the following members:
.EX 0
struct  ipc_perm shm_perm;  /*operation permission struct*/
int     shm_segsz;          /*size of segment*/
ushort  shm_cpid;           /*creator pid*/
ushort  shm_lpid;           /*pid of last operation*/
short   shm_nattch;         /*number of current attaches*/
time_t  shm_atime;          /*last attach time*/
time_t  shm_dtime;          /*last detach time*/
time_t  shm_ctime;          /*last change time*/
                            /*Times measured in secs since*/
                            /*00:00:00 GMT, Jan. 1, 1970*/
.EE
.B Shm_perm
is an ipc_perm structure that specifies the shared
memory operation permission.  This structure
includes the following members:
.EX 0
ushort  cuid;  /*creator user id*/
ushort  cgid;  /*creator group id*/
ushort  uid;   /*user id*/
ushort  gid;   /*group id*/
ushort  mode;  /*r/w permission*/
.EE
.B Shm_segz
specifies the size of the shared memory segment.
.B Shm_cpid
is the process id of the process that created the shared
memory identifier.
.B Shm_lpid
is the process id of the last process that performed
a shmop(2) operation.
.B Shm_nattch
is the number of processes that currently have this segment
attached.  
.B Shm_atime
is the time of the last
.PN shmat
operation,
.B shm_dtime
is the time of the last
.PN shmdt
operation, and
.B shm_ctime
is the time of the last 
shmctl(2) operation that changed one of the members of the above
structure.
.TP 5
Shared Memory Operation Permissions
.IP
In the shmop(2) and shmctl(2)
system call descriptions, the permission required for an
operation is given as ``{token}'', where token is the
type of permission needed, interpreted as follows:
.EX
00400  Read by user
00200  Write by user
00060  Read, Write by group
00006  Read, Write by others
.EE
Read and write permissions on a shmid are granted to a
process if one or more of the following are true:
.RS
.IP "1."
The effective user ID of the process is superuser.
.IP "2."
The effective user ID of the process matches
.B shm_perm.[c]uid
in the data structure associated with
.PN shmid
and the appropriate bit of the
user portion (0600) of
.B shm_perm.mode 
is set.
.IP "3."
The effective user ID of the process does not match
.B shm_perm.[c]uid
and the effective group ID of the process matches
.B shm_perm.[c]gid
and the appropriate bit of the group portion (060)
of
.B shm_perm.mode
is set.
.IP "4."
The effective user ID of the process does not match
.B shm_perm.[c]uid
and the effective group ID of the process does not match
.B shm_perm.[c]gid 
and the appropriate bit of the other portion (06) of
.B shm_perm.mode
is set.
.RE
.IP
Otherwise, the corresponding permissions are denied.
.SH SEE ALSO
intro(3), perror(3)
