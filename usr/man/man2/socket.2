.TH socket 2
.SH NAME
socket \- create an endpoint for communication
.SH SYNTAX
.nf
.ft B
#include <sys/types.h>
#include <sys/socket.h>
.PP
.ft B
s = socket(af, type, protocol)
int s, af, type, protocol;
.fi
.SH DESCRIPTION
The
.PN socket
system call
creates an endpoint for communication and returns a descriptor.
.PP
The operation of sockets is controlled by socket-level options, defined
in the file <sys/socket.h> and explained in the section SOCKET-LEVEL
OPTIONS.  The calls
setsockopt(2) and getsockopt(2) are used to
set and get options.
.SH ARGUMENTS
The
.I af
parameter specifies an address format. Addresses specified
in later operations using the socket are interpreted according
to these formats.  The
formats are defined in the include file <sys/socket.h>: 
.PP
.EX
AF_UNIX	(UNIX path names),
AF_INET	(ARPA Internet addresses),
AF_IMPLINK	(IMP \*(lqhost at IMP\*(rq addresses).
.EE
.PP
The 
.I type
argument specifies the semantics of communication.  The 
defined types are:
.PP
.EX
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
.EE
.PP
These socket types may or may not be available on your system.
The SOCK_STREAM and SOCK_DGRAM types are available if
your system includes the TCP/IP network.  For example,
if you can use the
.PN rlogin
command to log in to a remote ULTRIX node, your system
supports these socket types.
.PP
A SOCK_STREAM type provides sequenced, reliable,
two-way connection based byte streams with an out-of-band data
transmission mechanism.
A SOCK_DGRAM socket supports
datagrams (connectionless, unreliable messages of
a fixed maximum length, typically small).
.PP
SOCK_RAW sockets provide access to internal network interfaces,
and are available only to the super-user.  
.PP
The SOCK_SEQPACKET type is the socket protocol to request when
you want to communicate with other DIGITAL systems using DECnet. 
.PP
Socket types are discussed further in following sections.
.PP
The
.I protocol
argument specifies the protocol to be used with the socket.
Normally only a single protocol exists to support a particular
socket type using a given address format.  However, it is possible
that many protocols may exist, in which case a particular protocol
must be specified in this manner.  The protocol number to use is
particular to the ``lqcommunication domain'' in which communication
is to take place.  For further information, see
services(5) and protocols(5).
.SH SOCKET TYPE SOCK_STREAM
.PP
Sockets of type SOCK_STREAM
are full-duplex byte streams, similar
to pipes.  A stream socket must be in a
.I connected
state before any data can be sent or received
on it.  A connection to another socket is created with a
connect(2)
call.  Once connected, data may be transferred using
read(2) and write(2)
calls or some variant of the 
send(2)
and recv(2)
calls.  When a session has been completed, a
close(2)
may be performed.
Out-of-band data may also be transmitted as described in
send(2)
and received as described in
recv(2).
.PP
The communications protocols used to implement a
SOCK_STREAM ensure that data
is not lost or duplicated.  If a piece of data for which the
peer protocol has buffer space cannot be successfully transmitted
within a reasonable length of time, then
the connection is considered broken and calls
will indicate an error with
\-1 returns and with ETIMEDOUT as the specific code
in the global variable errno.
The protocols optionally keep sockets \*(lqwarm\*(rq by
forcing transmissions
roughly every minute in the absence of other activity.
An error is then indicated if no response can be
elicited on an otherwise
idle connection for a extended period (for example, 5 minutes).
A SIGPIPE signal is raised if a process sends
on a broken stream; this causes processes
that do not handle the signal to exit.
.SH SOCKET TYPES SOCK_DGRAM and SOCK_RAW
.PP
SOCK_DGRAM and SOCK_RAW
sockets allow sending of datagrams to correspondents
named in
send(2)
calls.  It is also possible to receive datagrams at
these sockets with
recv(2).
.PP
An 
fcntl(2)
call can be used to specify a process group to receive
a SIGURG signal when the out-of-band data arrives.
.SH SOCKET TYPE SOCK_SEQPACKET
.PP
SOCK_SEQPACKET sockets are similar to datagrams except
that they are guaranteed to be received in the sequence
that they are sent.  They are also guaranteed to be
error-free.
.SH SOCKET-LEVEL OPTIONS
.PP
The operation of sockets is controlled by socket-level
options.
These options are defined in the file
<sys/socket.h>.
The calls setsockopt(2)
and getsockopt(2)
are used to set and get options.
.PP
Options other than SO_LINGER take an integer parameter that
should be non-zero if the option is to be enabled, or zero if
it is to be disabled.
SO_LINGER uses a ``linger'' structure parameter
defined in <sys/socket.h>.  This structure specifies the desired
state of the option and the linger interval (see below).
.PP
.EX
SO_DEBUG  	turn on recording of debugging information
SO_REUSEADDR	allow local address reuse
SO_KEEPALIVE	keep connections alive
SO_DONTROUTE	do not apply routing on outgoing messages
SO_LINGER	linger on close if data present
SO_BROADCAST	permit sending of broadcast messages
.EE
.RE
.PP
SO_DEBUG enables debugging in the underlying protocol modules.
.PP
SO_REUSEADDR indicates the rules used in validating addresses supplied
in a
bind(2)
call should allow reuse of local addresses.  
.PP
SO_KEEPALIVE enables the
periodic transmission of messages on a connected socket.  Should the
connected party fail to respond to these messages, the connection is
considered broken and processes using the socket are notified through a
SIGPIPE signal.  
.PP
SO_DONTROUTE indicates that outgoing messages should
bypass the standard routing facilities.  Instead, messages are directed
to the appropriate network interface according to the network portion
of the destination address.  
.PP
SO_LINGER controls the actions taken when unsent messages
are queued on the socket and a 
close(2)
is performed.
When using the 
setsockopt(2)
to set the linger values,
the option value for the SO_LINGER command is the address of a linger
structure:
.EX
struct  linger {
        int     l_onoff;       /* option on/off */
        int     l_linger;      /* linger time */
};
.EE
If the socket promises reliable delivery of data and l_onoff is nonzero,
the system will block the process on the 
.PN close
attempt until it is able to transmit the data or until it decides it
is unable to deliver the information.  A timeout period, termed the
linger interval, is specified in l_linger.
If l_onoff is set to zero and a 
.PN close
is issued, the system will process the close in a manner that allows
the process to continue as quickly as possible.
.PP
SO_BROADCAST is used to enable or disable broadcasting on the socket.
.SH RETURN VALUE
A \-1 is returned if an error occurs.   Otherwise, the return
value is a descriptor to be used in other calls to refer to
the socket.
.SH DIAGNOSTICS
The
.PN socket
call fails if:
.TP 10
[EAFNOSUPPORT]
The specified address family is not supported in this version
of the system.
.TP 10
[ESOCKTNOSUPPORT]
The specified socket type is not supported in this address family.
.TP 10
[EPROTONOSUPPORT]
The specified protocol is not supported.
.TP 10
[EPROTOTYPE]
Request for a type of socket for which there is no supporting
protocol.
.TP 10
[EMFILE]
The per-process descriptor table is full.
.TP 10
[ENOBUFS]
No buffer space is available.  The socket cannot be created.
.SH SEE ALSO
accept(2), bind(2), connect(2), getsockname(2),
getsockopt(2), ioctl(2), listen(2), recv(2), select(2),
send(2), shutdown(2), socketpair(2), protocols(5), services(5)
``A 4.2 BSD Interprocess Communication Primer'',
.I ULTRIX-32 Supplementary Documents, 
Vol. III:System Manager
