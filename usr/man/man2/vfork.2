.TH vfork 2
.SH NAME
vfork \- spawn new process in a virtual memory efficient way
.SH SYNTAX
.B pid = vfork()
.br
.B int pid;
.SH DESCRIPTION
The
.PN vfork
can be used to create new processes without fully copying the address
space of the old process, which is horrendously inefficient in a paged
environment.  It is useful when the purpose of fork(2)
would have been to create a new system context for an
.IR execve .
The
.PN vfork
system call differs from
.PN fork
in that the child borrows the parent's memory and thread of
control until a call to execve(2)
or an exit (either by a call to
exit(2) or abnormally.)
The parent process is suspended while the child is using its resources.
.PP
The
.PN vfork
system call
returns 0 in the child's context and (later) the pid of the child in
the parent's context.
.PP
The
.PN vfork
system call
can normally be used just like
.PN fork.
It does not work, however, to return while running in the childs context
from the procedure which called
.PN vfork
since the eventual return from
.PN vfork
would then return to a no longer existent stack frame.
Be careful, also, to call
.I _exit
rather than
.I exit
if you can't
.IR execve ,
since
.I exit
will flush and close standard I/O channels, and thereby mess up the
parent processes standard I/O data structures.
(Even with
.PN fork
it is wrong to call
.I exit
since buffered data would then be flushed twice.)
.SH RESTRICTIONS
To avoid a possible deadlock situation,
processes which are children in the middle
of a
.PN vfork
are never sent SIGTTOU or SIGTTIN signals; rather,
output or
.IR ioctl s
are allowed
and input attempts result in an end-of-file indication.
.SH DIAGNOSTICS
Same as for
.PN fork .
.SH SEE ALSO
execve(2), fork(2), sigvec(2), wait(2)
