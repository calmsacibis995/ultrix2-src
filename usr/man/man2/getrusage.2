.TH getrusage 2
.SH NAME
getrusage \- get information about resource utilization
.SH SYNTAX
.nf
.ft B
#include <sys/time.h>
#include <sys/resource.h>
.PP
.ft B
.ta \w'#define 'u +\w'RUSAGE_CHILDREN  'u +\w'-1        'u
#define	RUSAGE_SELF	0	/* calling process */
#define	RUSAGE_CHILDREN	-1	/* terminated child processes */
.DT
.PP
.ft B
getrusage(who, rusage)
int who;
struct rusage *rusage;
.fi
.SH DESCRIPTION
The
.PN getrusage
system call
returns information describing the resources utilized by the current
process, or all its terminated child processes.
The
.I who
parameter is one of RUSAGE_SELF and RUSAGE_CHILDREN.
If
.I rusage
is non-zero, the buffer it points to will be filled in with
the following structure:
.EX 0
struct  rusage {
        struct timeval ru_utime;        /* user time used */
        struct timeval ru_stime;        /* system time used */
        int     ru_maxrss;
        int     ru_ixrss;       /* integral shared text size */
        int     ru_ismrss       /* integral shared memory size */
        int     ru_idrss;       /* integral unshared data size */
        int     ru_isrss;       /* integral unshared stack size */
        int     ru_minflt;      /* page reclaims */
        int     ru_majflt;      /* page faults */
        int     ru_nswap;       /* swaps */
        int     ru_inblock;     /* block input operations */
        int     ru_oublock;     /* block output operations */
        int     ru_msgsnd;      /* messages sent */
        int     ru_msgrcv;      /* messages received */
        int     ru_nsignals;    /* signals received */
        int     ru_nvcsw;       /* voluntary context switches */
        int     ru_nivcsw;      /* involuntary context switches */
};
.EE
.PP
The fields are interpreted as follows:
.TP 15
ru_utime
The total amount of time spent executing in user mode.
.TP 15
ru_stime
The total amount of time spent in the system executing on behalf
of the process(es).
.TP 15
ru_maxrss
The maximum resident set size utilized (in bytes).
.TP 15
ru_ixrss
An \*(lqintegral\*(rq value indicating the amount of text memory used
which was also shared among other processes.  This value is expressed
in units of kilobytes * seconds-of-execution and is calculated by
summing the number of shared memory pages in use each time the internal
system clock ticks and then averaging over 1 second intervals.
.TP 15
ru_ismrss
An integral value of the amount of shared memory residing in the data
segment of a process (expressed in units of kilobytes *
seconds-of execution).
.TP 15
ru_idrss
An integral value of the amount of unshared memory residing in the
data segment of a process (expressed in units of
kilobytes * seconds-of-execution).
.TP 15
ru_isrss
An integral value of the amount of unshared memory residing in the
stack segment of a process (expressed in units of
kilobytes * seconds-of-execution).
.TP 15
ru_minflt
The number of page faults serviced without any i/o activity; here
i/o activity is avoided by \*(lqreclaiming\*(rq a page frame from
the list of pages awaiting reallocation.
.TP 15
ru_majflt
The number of page faults serviced which required i/o activity.
.TP 15
ru_nswap
The number of times a process was \*(lqswapped\*(rq out of main
memory.
.TP 15
ru_inblock
The number of times the file system had to perform input.
.TP 15
ru_oublock
The number of times the file system had to perform output.
.TP 15
ru_msgsnd
The number of ipc messages sent.
.TP 15
ru_msgrcv
The number of ipc messages received.
.TP 15
ru_nsignals
The number of signals delivered.
.TP 15
ru_nvcsw
The number of times a context switch resulted due to a process
voluntarily giving up the processor before its time slice was
completed (usually to await availability of a resource).
.TP 15
ru_nivcsw
The number of times a context switch resulted due to a higher
priority process becoming runnable or because the current process
exceeded its time slice.
.PP
The numbers ru_inblock and ru_oublock account only for real
i/o.  Data supplied by the cacheing mechanism is charged only
to the first process to read or write the data.
.SH RESTRICTIONS
There is no way to obtain information about a child process
which has not yet terminated.
.SH DIAGNOSTICS
The possible errors for
.PN getrusage
are:
.TP 15
[EINVAL]
The
.I who
parameter is not a valid value.
.TP
[EFAULT]
The address specified by the
.I rusage
parameter is not in a valid part of the process address
space.
.SH SEE ALSO
gettimeofday(2), wait(2)
