.TH getsockopt 2
.SH NAME
getsockopt, setsockopt \- get and set options on sockets
.SH SYNTAX
.nf
.ft B
#include <sys/types.h>
#include <sys/socket.h>
.PP
.ft B
getsockopt(s, level, optname, optval, optlen)
int s, level, optname;
char *optval;
int *optlen;
.sp
setsockopt(s, level, optname, optval, optlen)
int s, level, optname;
char *optval;
int optlen;
.fi
.SH DESCRIPTION
The
.PN getsockopt
and
.PN setsockopt
system calls manipulate options
associated with a socket.  Options may exist at multiple
protocol levels; they are always present at the uppermost
socket level.
.PP
When manipulating socket options the level at which the
option resides and the name of the option must be specified.
To manipulate options at the socket level,
.I level
is specified as SOL_SOCKET.  To manipulate options at any
other level the protocol number of the appropriate protocol
controlling the option must be supplied.  For example,
to indicate an option is to be interpreted by the TCP protocol,
.I level
should be set to the protocol number of TCP.  For further
information, see getprotoent(3n).
.PP
The parameters
.I optval
and
.I optlen
are used to access option values for
.PN setsockopt.
For
.PN getsockopt
they identify a buffer in which the value for the
requested options are to be returned.  For
.PN getsockopt,
.I optlen
is a value-result parameter, initially containing the
size of the buffer pointed to by
.IR optval ,
and modified on return to indicate the actual size of
the value returned.  If no option value is
to be supplied or returned,
.I optval
may be supplied as 0.
.PP
The
.I optname
parameter and any specified options are 
passed uninterpreted to the appropriate
protocol module for interpretation.
The include file < sys/socket.h >
contains definitions for socket level options.
For further information, see socket(2).
Options at other protocol levels vary in format and
name.  Consult the appropriate reference page for details,
arp(4p), ip(4p), tcp(4p) or udp(4p).
.PP
A 0 is returned if the call succeeds, \-1 if it fails.
.SH DIAGNOSTICS
The call succeeds unless:
.TP 20
[EBADF]
The argument 
.I s
is not a valid descriptor.
.TP 20
[ENOTSOCK]
The argument 
.I s
is a file, not a socket.
.TP 20
[ENOPROTOOPT]
The option is unknown.
.TP 20
[EFAULT]
The address pointed to by
.I optval
is not in a valid part of the
process address space.
For
.PN getsockopt,
this error may also be returned if
.I optlen
is not in a valid part of the process address space.
.SH "SEE ALSO"
socket(2), getprotoent(3n)
