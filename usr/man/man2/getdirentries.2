.TH getdirentries 2 
.SH NAME 
getdirentries \- gets directory entries in a generic directory format
.SH SYNTAX
.nf
.ft B
#include <sys/dir.h>
.PP
.ft B
cc = getdirentries(fd, buf, nbytes, basep)
int cc, fd;
char *buf;
int nbytes;
long *basep;
.ft R
.fi
.SH DESCRIPTION
.PP
The 
.PN getdirentries 
system call puts directory entries from the 
directory referenced by the file descriptor
.I fd
into the buffer pointed to by
.I buf,
in a generic directory format.  Up to
.I nbytes
of data will be transferred.  The
.I nbytes
of data must be greater than or equal to the block size
associated with the file.  For further information, see stat(2).
Sizes less than 
.I nbytes
may cause errors on certain file systems.
.PP
The data returned in the buffer is a series of
.I direct
structures each containing the following entries:
.EX
unsigned long   d_ino;
unsigned short  d_reclen;
unsigned short  d_namlen;
char            d_name[MAXNAMELEN + 1]; 
.EE
.PP
The
.I d_ino
entry is a number which is unique for each
distinct file in the file system.
Files that are linked by hard links 
have the same
.I d_ino .
For further information, see link(2).
The
.I d_reclen
entry is the length, in bytes, of the directory record.
The
.I d_namlen
entry specifies the length of the file name.
The
.I d_name
entry contains a null terminated file name.
Thus the actual size of
.I d_name
may vary from 2 to \fLMAXNAMELEN + 1\fP.
.PP
The generic directory structures are not necessarily tightly packed.
The
.I d_reclen
entry may be used as an offset from the beginning of a
.I direct
structure to the next structure, if any.
.PP
Upon return, the actual number of bytes transferred is returned.
The current position pointer associated with
.I fd
is set to point to the next block of entries.
The pointer is not necessarily incremented
by the number of bytes returned by 
.PN getdirentries.
If the value returned is zero, the end of the
directory has been reached.
The current position pointer may be set and retrieved by
lseek(2).
The
.PN getdirentries
system call
writes the position of the block read into the location pointed to by
.IR basep .
It is not safe to set the current position pointer
to any value other than
a value previously returned by lseek(2)
or a value previously returned in the location pointed to by
.I basep
or zero.
.SH RETURN VALUE
If successful, the number of bytes actually transferred is returned.
Otherwise, a \-1 is returned and the global variable
.I errno
is set to indicate the error.
.SH ERRORS
The
.PN getdirentries
system call
will fail if one or more of the following are true:
.TP 15
EBADF
The
\fIfd\fP is not a valid file descriptor open for reading.
.TP 15
ENOTDIR
The \fIfd\fP is not a directory.
.TP 15
EFAULT
Either \fIbuf\fP or \fIbasep\fP point
outside the allocated address space.
.TP 15
EIO
While reading from or writing to the file system,
an I/O error occurred.
.TP 15
EINTR
A read from a slow device was interrupted before
any data arrived by the delivery of a signal.
.TP 15
EPERM
The user does not have read permission in the directory.
.SH "SEE ALSO"
close(2), link(2), lseek(2), open(2), stat(2)
