.\" Last modified by BAM on 25-Nov-1985 1300.
.\"
.TH printf 3s
.SH NAME
printf, fprintf, sprintf \- formatted output conversion
.SH SYNTAX
.B #include <stdio.h>
.PP
.B int printf(format
.RB [ ,
arg ] ...
.B )
.br
.B char *format;
.PP
.B int fprintf(stream, format
.RB [ ,
arg ] ...
.B )
.br
.SM
.B FILE
.B *stream;
.br
.B char *format;
.SH Non-System V Environment
.B "char *sprintf(s, format"
.RB [ ,
arg ] ...
.B )
.br
.B char *s, format;
.SH System V Environment
.B int sprintf(s, format
.RB [ ,
arg ] ...
.B )
.br
.B char *s, format;
.SH DESCRIPTION
The
.PN printf
subroutine places output on the standard output stream
.BR stdout .
The
.PN fprintf
subroutine places output on the named output
.IR stream .
The
.PN sprintf
subroutine places `output' in the string
.IR s ,
followed by the character `\\0'.
.PP
Each of these functions converts, formats, and prints its arguments after
the first under control of the first argument.
The first argument is a character string which contains two types of objects:
plain characters, which are simply copied to the output stream,
and conversion specifications, each of which causes conversion and printing
of the next successive
.IR arg .
.PP
Each conversion specification is introduced by the character
.BR % .
Following the
.BR % ,
there may be
.TP
.B \(bu
zero or more flags, which modify the meaning 
of the conversion specification;  
.TP
.B \(bu
an optional minus sign `\-' which specifies
.I "left adjustment"
of the converted value in the indicated field;
.TP
.B \(bu
an optional digit string specifying a
.I "field width;"
if the converted value has fewer characters than the field width
it will be blank-padded on the left (or right,
if the left-adjustment indicator has been given) to make up the field width;
if the field width begins with a zero,
zero-padding will be done instead of blank-padding;
.TP
.B \(bu
an optional period
.RB ` . '
which serves to separate the field width from the next digit string;
.TP
.B \(bu
an optional digit string specifying a
.I precision
which specifies the number of digits to appear after the
decimal point, for e- and f-conversion, or the maximum number of characters
to be printed from a string;
.TP
.B \(bu
the character
.B l
specifying that a following
.BR d ,
.BR o ,
.BR x ,
or
.B u
corresponds to a long integer
.IR arg .
.TP
.B \(bu
a character which indicates the type of
conversion to be applied.
.PP
A field width or precision may be `*' instead of a digit string.
In this case an integer
.I arg
supplies
the field width or precision.
.PP
The flag characters and their meanings are:
.TP
.B \-
The result of the conversion will be left-justified
within the field.
.TP
.B +
The result of a signed conversion will always begin 
with a sign (+ or \-).
.TP
.B blank
If the first character of a signed conversion is not
a sign, a blank will be prepended to the result.  This
implies that if the blank and + flags both appear, the
blank flag will be ignored.
.TP
.B \#
The value is to be converted to an alternate form.  For
.B c, d, s
and 
.B u
conversions, the flag has no effect.  For \fBo\fP conversions,
it increases the precision to force the first digit of the
result to be a zero.  For
.B x
or 
.B X
conversions, a non-zero result will have \fB0x\fP or \fB0X\fP
prepended to it.  For 
.B e, E, f, g
and
.B G
conversions, the result will always contain a decimal point,
even if no digits follow the point.  A decimal point usually
appears in the result of these conversions only if a digit 
follows it.  For \fBg\fP and \fBG\fP conversions, trailing zeroes
will not be removed from the result as they usually are.
.PP
The conversion characters
and their meanings are
.TP
.B dox
The integer
.I arg
is converted to decimal, octal, or
hexadecimal notation respectively.
.TP
.B f
The float or double
.I arg
is converted to decimal notation
in the style `[\fB\-\fR]ddd.ddd'
where the number of d's after the decimal point
is equal to the precision specification
for the argument.
If the precision
is missing,
6 digits are given;
if the precision is explicitly 0, no digits and
no decimal point are printed.
.TP
.B e
The float or double
.I arg
is converted in the style
`[\fB\-\fR]d\fB.\fRddd\fBe\fR\(+-dd'
where there is one digit before the decimal point and
the number after is equal to the
precision specification for the argument;
when the precision is missing,
6 digits are produced.
.TP
.B g
The float or double
.I arg
is printed in style
.BR d ,
in style
.BR f ,
or in
style
.BR e .
The style used depends on the value converted style:
style \fBe\fP will be used only if the exponent
resulting from the conversion is less than \-4 or 
greater than the precision.  Trailing zeroes are
removed from the result.  A decimal point appears only
if it is followed by a digit.
.TP
.B c
The character
.I arg
is printed.
.TP
.B s
.I Arg
is taken to be a string (character pointer)
and characters from the string are printed until
a null character or until
the number of characters indicated by the precision
specification is reached;
however if the precision is 0 or missing
all characters up to a null are printed.
.TP
.B u
The unsigned integer
.I arg
is converted to decimal
and printed (the result will be in the
range 0 through MAXUINT, where MAXUINT equals 4294967295 on a VAX-11
and 65535 on a PDP-11).
.TP
.B %
Print a `%'; no argument is converted.
.PP
In no case does a non-existent or small field width
cause truncation of a field;
padding takes place only if the specified field
width exceeds the actual width.
Characters generated by
.PN printf
are printed by 
.PN putc(3s).
.PP
.B Examples
.br
To print a date and time in the form `Sunday, July 3, 10:02',
where
.I weekday
and
.I month
are pointers to null-terminated strings:
.RS
.HP
.nh
printf("%s, %s %d, %02d:%02d", weekday, month, day, hour, min);
.RE
.hy
.PP
To print
.if n pi
.if t \(*p
to 5 decimals:
.IP
printf("pi = %.5f", 4*atan(1.0));
.SH ENVIRONMENT
In the ULTRIX environment, 
.PN printf 
and 
.PN fprintf 
return 0 for success and EOF for failure.  
The
.PN sprintf 
subroutine returns its first 
argument for success and EOF for failure.
.PP
In the System V environment, 
.PN printf, fprintf, 
and
.PN sprintf
subroutine returns the number of characters transmitted, 
not including the \\0 in the case of 
.PN sprintf or a negative 
value if an output error was encountered.
.SH RESTRICTIONS
Very wide fields (>128 characters) fail.
.SH SEE ALSO
ecvt(3), putc(3s), scanf(3s)
