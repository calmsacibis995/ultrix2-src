(File primFp.l)
(treeInsWithLen (lambda . local) list diff treeInsWithLen twop car onep bottom Internal-bcdcall getdisc eq bcdp cxr getd symbolp funcall quote get unitTreeInsert bigp not null and zerop cond treeIns |1+| setq rplacd cdr Cnth quotient plus fix copy let let*)
(treeIns$fp lambda treeInsWithLen twop car onep length Internal-bcdcall getdisc eq bcdp setq cxr getd symbolp and funcall quote get let unitTreeInsert null bottom listp not cond If)
(mod$fp lambda bottom cadr car mod ok_pair quote IncrTimes cond)
(exp$fp lambda bottom exp numberp quote IncrTimes cond)
(log$fp lambda bottom log minusp not numberp and quote IncrTimes cond)
(acos$fp lambda bottom acos abs greaterp not numberp and quote IncrTimes cond)
(cos$fp lambda bottom cos numberp quote IncrTimes cond)
(asin$fp lambda bottom asin abs greaterp not numberp and quote IncrTimes cond)
(sin$fp lambda bottom sin numberp quote IncrTimes cond)
(split$fp lambda add1 cdr car setq nreverse cons greaterp quotient plus fix do list eq null bottom listp not IncrTimes length atom size quote IncrSize cond)
(pair$fp lambda add cddr setq cadr list tconc diff equal car lessp cons ncons do null bottom listp not IncrTimes length atom size quote IncrSize cond)
(concat$fp lambda cdr lconc bottom not car null cons ncons copy do listp If IncrTimes length atom size quote IncrSize cond)
(pick$fp lambda plus absval minusp nthelem greaterp plusp listp length atom size IncrSize quote IncrTimes progn bottom cddr bigp cdr null and zerop fixp not or cond If cadr car let)
(front$fp lambda cdr reverse listp bottom null IncrTimes length atom size quote IncrSize cond)
(first$fp lambda car bottom listp not IncrTimes length atom size quote IncrSize cond If)
(last$fp lambda bottom last car listp null IncrTimes length atom size quote IncrSize cond)
(iota$fp lambda |1-| cons setq do bigp cdr null and zerop lessp fixp not bottom listp undefp quote IncrTimes cond)
(emptyHeader (lambda . local) |1-| ncons cons setq eq =& = do)
(trnspz (lambda . local) tconc or nreverse cdr cons setq liszt-internal-do mapcar null car length emptyHeader do)
(allLists (lambda . local) cdr return car dtpr not cond If null do)
(allNulls (lambda . local) cdr return car cond If null do)
(trans$fp lambda bottom eq not or trnspz null do cadr car cdr + IncrTimes length atom size quote IncrSize allNulls allLists listp and cond If)
(rotr$fp lambda bottom rotl$fp reverse onep listp null IncrTimes length atom size quote IncrSize cond)
(rotl$fp lambda bottom car list cdr append onep listp null IncrTimes length atom size quote IncrSize cond)
(apndr$fp lambda bottom cdr append IncrTimes atom size quote IncrSize car listp length eq dtpr and cond)
(apndl$fp lambda bottom car cons IncrTimes atom size quote IncrSize cadr listp length eq dtpr and cond)
(length$fp lambda bottom listp IncrTimes length atom size quote IncrSize cond)
(distr$fp lambda bottom nreverse cdr list car cons setq null liszt-internal-do mapcar IncrTimes length atom size quote IncrSize rpair$ cond let)
(distl$fp lambda bottom nreverse cdr list car cons setq null liszt-internal-do mapcar IncrTimes length atom size quote IncrSize lpair$ cond let)
(rpair$ (lambda . local) null cdr car setq listp not undefp or cond)
(lpair$ (lambda . local) length onep null cdr car setq listp not undefp or cond)
(reverse$fp lambda bottom reverse listp null IncrTimes length atom size quote IncrSize cond)
(null$fp lambda null IncrTimes length atom size quote IncrSize cond)
(atom$fp lambda IncrTimes length atom size quote IncrSize cond)
(id$fp lambda IncrTimes length atom size quote IncrSize cond)
(out$fp lambda terpri fpPP)
(tlr$fp lambda bottom cdr reverse onep listp IncrTimes length atom size quote IncrSize cond)
(tl$fp lambda cdr bottom IncrTimes length atom size quote IncrSize cond)
(undefp lambda eq)
(boolp lambda memq)
(ok_pair (lambda . local) Internal-bcdcall getdisc quote bcdp setq cxr getd symbolp funcall cadr car and length eq atom not cond)
(ok_eqpair (lambda . local) length eq atom not cond)
(ne$fp lambda bottom cadr car equal not ok_eqpair quote IncrTimes cond)
(gt$fp lambda bottom cadr car greaterp ok_pair quote IncrTimes cond)
(ge$fp lambda bottom cadr car lessp not ok_pair quote IncrTimes cond)
(eq$fp lambda bottom cadr car equal ok_eqpair quote IncrTimes cond)
(le$fp lambda bottom cadr car greaterp not ok_pair quote IncrTimes cond)
(lt$fp lambda bottom cadr car lessp ok_pair quote IncrTimes cond)
(not$fp lambda eq boolp bottom atom not quote IncrTimes cond)
(g00126::u-fnc lambda quote)
(xor$fp lambda bottom eq and or cadr car let ok_pair quote IncrTimes cond)
(g00108::u-fnc lambda quote)
(or$fp lambda bottom cadr car eq ok_pair quote IncrTimes cond)
(g00093::u-fnc lambda quote)
(and$fp lambda bottom cadr car eq ok_pair quote IncrTimes cond)
(g00078::u-fnc lambda)
(div$fp lambda bottom car quotient bigp cdr null and cadr zerop not ok_pair quote IncrTimes cond)
(g00058::u-fnc lambda)
(times$fp lambda bottom cadr car product ok_pair quote IncrTimes cond)
(g00045::u-fnc lambda)
(sub$fp lambda bottom cadr car diff ok_pair quote IncrTimes cond)
(g00032::u-fnc lambda)
(plus$fp lambda bottom cadr car plus ok_pair quote IncrTimes cond)
