(File codeGen.l)
(ti$fp (lambda . local) mName cons quote list codeGen let let*)
(while$fp (lambda . local) mName cons quote list codeGen let let*)
(insert$fp (lambda . local) mName cons quote list codeGen let let*)
(alpha$fp (lambda . local) mName cons quote list codeGen let let*)
(constr$fp lexpr nreverse setq null car liszt-internal-do mapcar append cadr quote list cons |1-| + cdr <& arg do minusp eq cond listify let let*)
(condit$fp (lambda . local) mName cons quote list codeGen let)
(put_fn lambda codeGen cons quote list putd extName untraceDel)
(build_constr (lambda . local) |1+| cdr append Internal-bcdcall getdisc bcdp setq getd symbolp funcall return |1-| greaterp codeGen mNameI list do quote cxr null hunksize eq and cond)
(codeGen lambda build_constr codeGen mName while$fp condit$fp |1+| absval minusp plusp cons bigp not cdr null and zerop If let ti$fp insert$fp alpha$fp cxr eq quote list atom cond)
(mNameI lambda cxr explodec cdr append quote cons nreverse implode getFform atom cond)
(mName (lambda . local) cxr explodec cdr append cons nreverse implode getFform quote list atom cond)
(getFform macro cons quote list cadr)
