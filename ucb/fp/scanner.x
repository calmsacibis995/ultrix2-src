(File scanner.l)
(p_strng lambda ascii patom)
(clr_teol lambda patom return tyo cons memq null and not exploden car *throw readc setq quote eq cond prog Getc do let)
(read_inp lambda reverse append setq length onep cons quote equal car =& = exploden If return memq tyo tyi Tyi eq or tyipeek do patom listp not null and cond prog read Read let)
(get_obj lambda exploden car symbolp diff numberp list listp not eq find get_obj *catch tyipeek peekc numer$ *throw memq atom and boolp quote return chk_bot$ cond read_inp setq prog let)
(chk_bot$ lambda cdr car chk_bot$ or eq atom cond)
(two_kind (lambda . local) return tyo cons memq null and not exploden car *throw readc quote let Getc setq prog tyipeek peekc eq cond)
(readit lambda list *throw listp atom find nreverse eq get_obj *catch do let quote patom null and cons setq car memq not cond If)
(namtyp (lambda . local) memq null list quote eq cond get_nam$ let)
(get_nam$ (lambda . local) return tyo memq null and exploden car *throw readc quote cond prog let Getc setq nreverse implode eq alpha$ numer$ or not tyipeek peekc cons do)
(get_num$ (lambda . local) tyo cons null and exploden car readc quote eq prog let Getc times plus setq *throw numer$ not cond return memq tyipeek peekc diff do)
(numer$ (lambda . local) lessp greaterp and)
(alpha$ (lambda . local) lessp greaterp and or)
(g00183::scan$asc lambda quote list get_obj let)
(g00178::scan$asc lambda ascii list quote two_kind)
(g00173::scan$asc lambda quote two_kind)
(g00168::scan$asc lambda quote two_kind)
(g00161::scan$asc lambda two_kind get_num$ minus quote list tyipeek peekc numer$ cond)
(g00156::scan$asc lambda quote)
(g00151::scan$asc lambda quote)
(g00146::scan$asc lambda quote)
(g00139::scan$asc lambda get_num$ quote list tyipeek peekc numer$ cond)
(g00134::scan$asc lambda quote)
(g00129::scan$asc lambda quote)
(g00124::scan$asc lambda quote)
(g00119::scan$asc lambda quote)
(g00114::scan$asc lambda quote)
(g00109::scan$asc lambda quote)
(g00104::scan$asc lambda quote)
(g00099::scan$asc lambda quote)
(g00094::scan$asc lambda quote)
(g00089::scan$asc lambda quote)
(g00084::scan$asc lambda quote)
(g00079::scan$asc lambda quote)
(g00074::scan$asc lambda quote)
(get_tkn lambda Internal-bcdcall getdisc bcdp cxr getd symbolp funcall ascii get clr_teol get_num$ list numer$ namtyp alpha$ return tyo cons memq null and not exploden car *throw readc setq quote eq cond prog let Getc do)
