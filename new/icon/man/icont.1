.if n .fp M B
.TH ICONT 1 "2 March 1983" "The University of Arizona"
.SH NAME
icont \- translate Icon programs for interpretive execution
.SH SYNOPSIS
.B icont
[ option ... ] file ... [
.B \(mix
arg ... ]
.SH DESCRIPTION
.I Icont
is a translator for Version 5 of the Icon programming language,
which produces a file suitable for interpretation by the Icon
interpreter.
Translation consists of two phases:
.I translation
and
.IR linking .
During translation,
each Icon source file is translated into an intermediate language;
during linking,
the intermediate language files are combined and a single
output file is produced.
The output file from the linker is referred to as an \fIinterpretable\fR file.
Unless the
.B \(mio
option is specified, the name of the resulting interpretable file is
formed by deleting the suffix of the first input file named on the
command line.
If the
.B \(mix
argument is used,
the file is automatically executed by the interpreter
and any arguments following the
.B \(mix
are passed as execution arguments to the Icon program itself.
.PP
Files whose names end in `.icn' are assumed to be Icon source programs;
they are translated, and the intermediate code is left in two files of
the same name with `.u1' and `.u2' substituted for `.icn'.
The intermediate code files normally are deleted when compilation has finished.
Files whose names end in `.u1' or `.u2' are assumed to be intermediate
code files from a previous translation
(only one should be named \(em the other is assumed);
these files are included in the linking phase after any `.icn'
files have been translated.
A `.u1' or `.u2' file that is explicitly named is not deleted.
Icon source programs may be read from standard input.
The argument
.B \(mi
signifies the use of standard input as a source file.
In this case, the intermediate code is placed in `stdin.u1' and `stdin.u2'
and the interpretable file is `stdin'.
.PP
The following options are recognized by
.IR icont .
.TP 4
.B \(mic
Suppress the linking phase.
The intermediate code files are not deleted.
.TP
.B \(mim
Preprocess each `.icn' source file
with the
.IR m4 \^(1)
macro processor before translation.
.TP
.BI \(mio " output"
Name the interpretable file
.IR output .
.TP
.B \(mis
Suppress any informative messages from the translator and
linker.
Normally, both informative messages and error messages are sent
to standard error output.
.TP
.B \(mit
Arrange for \fB&trace\fR to have an initial value of \(mi1
when the program is executed.
Normally, \fB&trace\fR has an initial value of 0.
.TP
.B \(miu
Issue warning messages for undeclared identifiers in the program.
The warnings are issued during the linking phase.
.PP
The interpretable
file produced by the Icon linker is
.I
directly executable.
\fRFor example, the command
.nf
.sp 1
.in +.5i
.ft B
icont hello.icn
.ft R
.in -.5i
.sp 1
.fi
produces a file named \fBhello\fR
that can be run by the command
.nf
.sp 1
.in +.5i
.ft B
hello
.ft R
.in -.5i
.sp 1
.fi
The method used to make interpretable files appear to be directly
executable is system dependent.
See the Icon installation guide for complete details.
For most intents and purposes, interpretable
files are executable programs in the same sense that files produced by
.IR ld \^(1)
are executable programs.
.PP
Arguments can be passed to the Icon program by following the program
name with the arguments.  Any such arguments are passed to the main
procedure as a list of strings.
.PP
When an Icon program is executed, a number of environment variables
are examined to determine certain execution parameters.
The values assigned to these variables should be numbers.
The variables that affect execution
and the interpretations of their values are as follows:
.TP 4
.I TRACE
Initialize the value of \fB&trace\fR.
If this variable has a value, it overrides the translation-time
.B \(mit
option.
.TP
.I NBUFS
The number of i/o buffers to use for files.
When a file is opened, it is assigned an i/o buffer if one is available
and the file is not a tty.
If no buffer is available, the file is not buffered.
\fB&input\fR, \fB&output\fR, and \fB&errout\fR are buffered if buffers
are available.
On VAX systems, ten buffers are allocated initially;
on PDP-11 systems, five buffers are allocated initially.
.TP
.I NOERRBUF
If set, \fB&errout\fR is not buffered.
.TP
.I STRSIZE
The initial size of the string space, in bytes.
The string space grows if necessary, but it never shrinks.
On VAX systems, the string space is initially 51,200 bytes;
on PDP-11 systems, 10,240 bytes initially.
.TP
.I HEAPSIZE
The initial size of the heap, in bytes.
The heap grows if necessary, but it never shrinks.
On VAX systems, the heap is initially 51,200 bytes;
on PDP-11 systems, 10,240 bytes initially.
.TP
.I NSTACKS
The number of stacks initially available for co-expressions.
On VAX systems, four stacks are initially allocated; on PDP-11
systems, two stacks are initially allocated.
More are automatically allocated if needed.  It is unwise to set
.I NSTACKS
to 1.
.TP
.I STKSIZE
The size of each co-expression stack, in words.
On VAX systems, stacks are normally 2000 words;
on PDP-11 systems, stacks are normally 1000 words.
.TP
.I PROFILE
Turn on execution profiling of the runtime system.
The value of this variable specifies the sampling resolution, in words.
If the value is zero, profiling is not done.
When a profiled program finishes, a file named `mon.out'
is created containing the results of the profile.
The program
.IR prof \^(1)
can be used to examine the results.
This produces a profile of the runtime system,
not the user program.
.SH FILES
.ta \w'v5g/int/bin/utran     'u
v5g/int/bin/utran	icon translator
.br
v5g/int/bin/ulink	icon linker
.br
v5g/int/bin/iconx	icon interpreter
.br
mon.out	results of profiling
.SH SEE ALSO
.I
The Icon Programming Language\fR,
Ralph E. Griswold and Madge T. Griswold,
Prentice-Hall Inc.,
Englewood Cliffs, New Jersey,
1983.
.LP
\fIInstallation and Maintenance Guide for Release 5g of Icon\fR,
Department of Computer Science, The University of Arizona,
March 1983.
.LP
iconc\^(1), m4\^(1), prof\^(1), monitor\^(3)
.SH BUGS
.LP
Downward compatibility of interpretable files will not be maintained
in subsequent releases of Icon.  No checks are performed to determine
if the interpretable file and the interpreter are compatible.  Peculiar
program behavior is the only indication of such incompatibility.
.LP
Interpretable files do not stand alone; the Icon interpreter must be
present on the system.  This implies that an interpretable
file produced on one system will not work on another system unless
the Icon interpreter is in the same place on both systems and that
the interpreter is of the same version of Icon as the translator
that produced the interpretable file.
.LP
Because of the way that co-expressions are implemented,
there is a possibility that programs
in which they are used may malfunction mysteriously.
.LP
Integer overflow on multiplication is not detected.
.LP
If the
.B \(mim
option is used,
line numbers reported in error messages or tracing messages
are from the file after, not before, preprocessing.
