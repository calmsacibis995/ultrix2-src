# @(#)xmakefile	1.3	Ultrix	6/6/86
#
# name: xmakefile
# Makefile for "src" subdirectory of GNU emacs system.
# You needn't activate this file directly because this file "xmakefile" is
# called from another makefile named "Makefile" in this "src" directory.
# While in the original GNU emacs sytem, this file is created by Makefile above
# and called from it.
# This modefied GNU emacs system has "xmakefile" in advance in convienience.

# Symbols below are derived from top level Makefile
DESTROOT=
PATHLOADSEARCH=
PATHEXEC=
PATHLOCK=
PATHSUPERLOCK=

LIBG= -lg
LIBSTD= -lc
DEBUGSWITCH= -g
LDFLAGS= -X
CFLAGS= $(DEBUGSWITCH) -Demacs $(MYCPPFLAG)
obj=    dispnew.o scroll.o xdisp.o window.o \
	term.o cm.o $(XOBJ) \
	emacs.o keyboard.o macros.o keymap.o sysdep.o \
	buffer.o filelock.o insdel.o marker.o \
	minibuf.o fileio.o dired.o filemode.o \
	cmds.o casefiddle.o indent.o search.o regex.o undo.o \
	alloc.o data.o doc.o editfns.o callint.o \
	eval.o fns.o print.o lread.o \
	abbrev.o syntax.o unexec.o mocklisp.o bytecode.o \
	process.o callproc.o \
	doprnt.o
otherobj= termcap.o tparam.o lastfile.o alloca.o malloc.o
lisp=	../lisp/simple.elc ../lisp/files.elc ../lisp/window.elc \
	../lisp/indent.elc ../lisp/loaddefs.el ../lisp/paths.el \
	../lisp/startup.elc ../lisp/lisp.elc \
	../lisp/page.elc ../lisp/register.elc \
	../lisp/paragraphs.elc ../lisp/lisp-mode.elc \
	../lisp/text-mode.elc ../lisp/fill.elc \
	../lisp/c-mode.elc ../lisp/isearch.elc \
	../lisp/replace.elc ../lisp/abbrev.elc \
	../lisp/buff-menu.elc ../lisp/subr.elc
SHELL=/bin/sh
LIBES= $(LIBNET) $(LIBJOBS) $(LTERMCAP) $(LIBX) $(LIBBSD) $(LIBSTD) $(LIBG)
all: xemacs
xemacs: temacs ../etc/DOC ${lisp}
### Add w permision for updating version no.
### the one gotten by sccs get has only r permission.
	chmod 644 ../lisp/version.el
	./temacs -batch -l inc-vers
	chmod 444 ../lisp/version.el
	./temacs -batch -l loadup.el dump
../etc/DOC: ../etc/make-docfile ${obj} ${lisp} auxdoc.c
	../etc/make-docfile auxdoc.c ${obj} ${lisp} ../lisp/version.el > ../etc/DOC
../etc/make-docfile:
	cd ../etc; make ${MFLAGS} make-docfile
temacs: $(PARALLEL) $(LOCALCPP) $(SHORT) crt0.o ${obj} ${otherobj}
	ld ${STARTFLAGS} ${LDFLAGS} -o temacs crt0.o ${obj} ${otherobj} ${LIBES} ${ALIGNMENT}
CPP = /lib/cpp
paths.h: paths.h.dist
	@sh -c "if test -r $@; then echo $? is newer than $@; exit 1;\
	  else exit 0; fi"
### Edit paths.h with th symbols defined in top level Makefile.
### Forrowing sevral lines replace one original line commented out below.
###	cp $? $@
	sed \
	-e 's%#define PATH_LOADSEARCH ":/usr/local/emacs/lisp"%#define PATH_LOADSEARCH ":${DESTROOT}${PATHLOADSEARCH}"%'  \
	-e 's%#define PATH_EXEC "/usr/local/emacs/etc"%#define PATH_EXEC "${DESTROOT}${PATHEXEC}"%' \
	-e 's%#define PATH_LOCK "/usr/local/emacs/lock/"%#define PATH_LOCK "${DESTROOT}${PATHLOCK}/"%' \
	-e 's%#define PATH_SUPERLOCK "/usr/local/emacs/lock/!!!SuperLock!!!"%#define PATH_SUPERLOCK "${DESTROOT}${PATHSUPERLOCK}"%' \
	paths.h.dist >  paths.h

config.h: config.h.dist
	@sh -c "if test -r $@; then echo $? is newer than $@; exit 1;\
	  else exit 0; fi"
	cp $? $@
alloca.o : alloca.s config.h
	$(CPP) -E alloca.s | \
	sed -e 's///' -e 's/^#.*//' | \
	sed -n -e '/^..*$$/p' > alloca.t
	as -o alloca.o alloca.t
	rm alloca.t
abbrev.o : abbrev.c buffer.h commands.h config.h 
buffer.o : buffer.c syntax.h buffer.h commands.h window.h config.h 
callint.o : callint.c window.h commands.h buffer.h config.h 
callproc.o : callproc.c paths.h buffer.h commands.h config.h 
casefiddle.o : casefiddle.c syntax.h commands.h buffer.h config.h 
cm.o : cm.c cm.h termhooks.h config.h
cmds.o : cmds.c syntax.h buffer.h commands.h config.h 
crt0.o : crt0.c config.h
dired.o : dired.c commands.h buffer.h config.h 
dispnew.o : dispnew.c commands.h window.h buffer.h dispextern.h termchar.h termopts.h cm.h config.h
doc.o : doc.c config.h paths.h
doprnt.o : doprnt.c
editfns.o : editfns.c window.h buffer.h config.h 
emacs.o : emacs.c commands.h config.h 
fileio.o : fileio.c window.h buffer.h config.h 
filelock.o : filelock.c buffer.h paths.h config.h
filemode.o : filemode.c 
indent.o : indent.c window.h indent.h buffer.h config.h termchar.h termopts.h
insdel.o : insdel.c window.h buffer.h config.h 
keyboard.o : keyboard.c termchar.h termhooks.h termopts.h buffer.h commands.h window.h macros.h config.h 
keymap.o : keymap.c buffer.h commands.h config.h 
lastfile.o : lastfile.c 
macros.o : macros.c window.h buffer.h commands.h macros.h config.h
malloc.o : malloc.c config.h
marker.o : marker.c buffer.h config.h 
minibuf.o : minibuf.c syntax.h window.h buffer.h commands.h config.h 
mocklisp.o : mocklisp.c buffer.h config.h
process.o : process.c process.h buffer.h window.h termhooks.h config.h 
regex.o : regex.c syntax.h buffer.h config.h regex.h 
scroll.o : scroll.c termchar.h config.h dispextern.h
search.o : search.c regex.h commands.h buffer.h syntax.h config.h 
syntax.o : syntax.c syntax.h buffer.h commands.h config.h 
sysdep.o : sysdep.c config.h dispextern.h termhooks.h termchar.h termopts.h
term.o : term.c termchar.h termhooks.h termopts.h config.h cm.h
termcap.o : termcap.c
terminfo.o : terminfo.c config.h
tparam.o : tparam.c
undo.o : undo.c buffer.h commands.h undo.h config.h 
unexec.o : unexec.c config.h
window.o : window.c indent.h commands.h window.h buffer.h config.h termchar.h
xdisp.o : xdisp.c macros.h commands.h indent.h buffer.h dispextern.h termchar.h window.h config.h 
xfns.o : xfns.c window.h config.h
xterm.o : xterm.c xterm.h dispextern.h config.h
alloc.o : alloc.c window.h buffer.h config.h 
bytecode.o : bytecode.c buffer.h config.h 
data.o : data.c buffer.h config.h 
eval.o : eval.c commands.h config.h
fns.o : fns.c commands.h config.h
print.o : print.c process.h window.h buffer.h config.h 
lread.o : lread.c buffer.h paths.h config.h 

clean:
	rm -f xemacs temacs emacs-17.62.* crt0.o ${obj} ${otherobj} \
	      paths.h config.h ../etc/DOC ../etc/DOC.17.62.* ../etc/make-docfile

